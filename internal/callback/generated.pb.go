// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: github.com/narqo/benchserder/internal/callback/generated.proto

package callback

import (
	fmt "fmt"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"

	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	_ "github.com/golang/protobuf/ptypes/timestamp"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

func (m *Data) Reset()         { *m = Data{} }
func (m *Data) String() string { return proto.CompactTextString(m) }
func (*Data) ProtoMessage()    {}
func (*Data) Descriptor() ([]byte, []int) {
	return fileDescriptor_425a82cb1a1322e9, []int{0}
}
func (m *Data) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Data) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Data.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Data) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Data.Merge(m, src)
}
func (m *Data) XXX_Size() int {
	return m.ProtoSize()
}
func (m *Data) XXX_DiscardUnknown() {
	xxx_messageInfo_Data.DiscardUnknown(m)
}

var xxx_messageInfo_Data proto.InternalMessageInfo

func (m *SimSlotIds) Reset()         { *m = SimSlotIds{} }
func (m *SimSlotIds) String() string { return proto.CompactTextString(m) }
func (*SimSlotIds) ProtoMessage()    {}
func (*SimSlotIds) Descriptor() ([]byte, []int) {
	return fileDescriptor_425a82cb1a1322e9, []int{1}
}
func (m *SimSlotIds) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SimSlotIds) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SimSlotIds.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SimSlotIds) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SimSlotIds.Merge(m, src)
}
func (m *SimSlotIds) XXX_Size() int {
	return m.ProtoSize()
}
func (m *SimSlotIds) XXX_DiscardUnknown() {
	xxx_messageInfo_SimSlotIds.DiscardUnknown(m)
}

var xxx_messageInfo_SimSlotIds proto.InternalMessageInfo

func init() {
	proto.RegisterType((*Data)(nil), "github.com.narqo.benchserder.internal.callback.Data")
	proto.RegisterMapType((map[string]string)(nil), "github.com.narqo.benchserder.internal.callback.Data.ApiPartnerParamsEntry")
	proto.RegisterMapType((map[string]string)(nil), "github.com.narqo.benchserder.internal.callback.Data.DynamicCallbackParametersEntry")
	proto.RegisterMapType((map[string]string)(nil), "github.com.narqo.benchserder.internal.callback.Data.PartnerParametersEntry")
	proto.RegisterMapType((map[string]string)(nil), "github.com.narqo.benchserder.internal.callback.Data.PartnerSdkParamsEntry")
	proto.RegisterMapType((map[string]string)(nil), "github.com.narqo.benchserder.internal.callback.Data.PublisherParamsEntry")
	proto.RegisterType((*SimSlotIds)(nil), "github.com.narqo.benchserder.internal.callback.SimSlotIds")
}

func init() {
	proto.RegisterFile("github.com/narqo/benchserder/internal/callback/generated.proto", fileDescriptor_425a82cb1a1322e9)
}

var fileDescriptor_425a82cb1a1322e9 = []byte{
	// 2215 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x58, 0xdf, 0x7b, 0x53, 0xb7,
	0xf9, 0x8f, 0x1b, 0x0a, 0x89, 0xec, 0xfc, 0x40, 0x04, 0x2a, 0x92, 0x62, 0x1b, 0xf8, 0x7e, 0x69,
	0xa0, 0xe0, 0x14, 0x18, 0x1b, 0x85, 0xad, 0x9b, 0x93, 0xd0, 0xd6, 0x25, 0x40, 0x66, 0x27, 0x74,
	0x63, 0xdd, 0x34, 0xf9, 0x48, 0xb6, 0xf5, 0xf8, 0x1c, 0x9d, 0x33, 0x49, 0xc7, 0x21, 0xbd, 0xdc,
	0xb3, 0x8b, 0x5e, 0xf6, 0x79, 0xf6, 0x0f, 0x74, 0xfb, 0x6b, 0x7a, 0xd9, 0xcb, 0x5d, 0xb1, 0x3d,
	0xf0, 0x0f, 0xec, 0x9a, 0xab, 0x3d, 0x7a, 0x75, 0x8e, 0xed, 0x84, 0x6c, 0x0f, 0x2e, 0x5c, 0xf9,
	0xe8, 0xf3, 0xfe, 0xfa, 0xe8, 0xd5, 0xab, 0x57, 0x92, 0xd1, 0x27, 0x5d, 0x69, 0x7b, 0x69, 0xbb,
	0x16, 0xc4, 0xd1, 0x9a, 0x62, 0xfa, 0x4f, 0xf1, 0x5a, 0x5b, 0xa8, 0xa0, 0x67, 0x84, 0xe6, 0x42,
	0xaf, 0x49, 0x65, 0x85, 0x56, 0x2c, 0x5c, 0x0b, 0x58, 0x18, 0xb6, 0x59, 0xd0, 0x5f, 0xeb, 0x0a,
	0x25, 0x34, 0xb3, 0x82, 0xd7, 0x12, 0x1d, 0xdb, 0x18, 0xd7, 0x46, 0xf6, 0x35, 0xb0, 0xaf, 0x8d,
	0xd9, 0xd7, 0x72, 0xfb, 0x5a, 0x6e, 0xbf, 0x7c, 0x6d, 0x2c, 0x5e, 0x37, 0xee, 0xc6, 0x6b, 0xe0,
	0xa6, 0x9d, 0x76, 0x60, 0x04, 0x03, 0xf8, 0xf2, 0xee, 0x97, 0xef, 0xbe, 0x1e, 0xbd, 0x28, 0x56,
	0x62, 0xff, 0x30, 0xb7, 0xe5, 0xd7, 0x9c, 0x9b, 0x4a, 0xc3, 0x90, 0xb5, 0x43, 0xf1, 0x8a, 0x7d,
	0xa5, 0x1b, 0xc7, 0xdd, 0x50, 0x8c, 0x28, 0x5a, 0x19, 0x09, 0x63, 0x59, 0x94, 0x78, 0x85, 0x0b,
	0x7f, 0xff, 0x10, 0x1d, 0xdb, 0x64, 0x96, 0xe1, 0xf3, 0xa8, 0x64, 0x85, 0x8e, 0x0c, 0x35, 0xb2,
	0xab, 0x04, 0x27, 0x85, 0x6a, 0x61, 0x75, 0xa6, 0x59, 0x04, 0xac, 0x05, 0x10, 0xbe, 0x88, 0xe6,
	0xb4, 0xe8, 0x08, 0x2d, 0x54, 0x20, 0xa8, 0x65, 0x5d, 0xf2, 0x4e, 0xb5, 0xb0, 0x3a, 0xdb, 0x2c,
	0x0d, 0xc1, 0x1d, 0xd6, 0xc5, 0x77, 0xd1, 0x82, 0x50, 0x5d, 0xd6, 0x15, 0x91, 0x50, 0x96, 0xda,
	0xfd, 0x44, 0x90, 0xe9, 0x6a, 0x61, 0x75, 0x7a, 0x1d, 0xbf, 0x7c, 0x56, 0x99, 0xbf, 0x37, 0x14,
	0xed, 0xec, 0x27, 0xa2, 0x39, 0x2f, 0x0e, 0x8c, 0x31, 0x41, 0x27, 0xac, 0x66, 0x41, 0x5f, 0x68,
	0x72, 0x0c, 0x7c, 0xe7, 0x43, 0xfc, 0x01, 0x5a, 0x90, 0xca, 0x58, 0x16, 0x86, 0x34, 0xd7, 0x78,
	0x17, 0x34, 0xe6, 0x33, 0x78, 0x27, 0x53, 0x3c, 0x8f, 0x4a, 0x21, 0x33, 0x76, 0xa8, 0x75, 0x1c,
	0xb4, 0x8a, 0x0e, 0xcb, 0x55, 0x2e, 0xa3, 0xc5, 0x38, 0xb5, 0xdc, 0xa5, 0x69, 0xa8, 0x76, 0x02,
	0xd4, 0x16, 0x72, 0x3c, 0x57, 0x5d, 0x41, 0xb3, 0x2c, 0x49, 0xa8, 0x8d, 0xfb, 0x42, 0x91, 0x19,
	0xd0, 0x99, 0x61, 0x49, 0xb2, 0xe3, 0xc6, 0x18, 0xa3, 0x63, 0x8c, 0x4b, 0x4e, 0x66, 0x01, 0x87,
	0x6f, 0xfc, 0x1e, 0x3a, 0x11, 0x1b, 0xaa, 0x58, 0x24, 0x08, 0x02, 0xf8, 0x78, 0x6c, 0x1e, 0xb2,
	0x48, 0xe0, 0x73, 0x08, 0xc5, 0x86, 0x0e, 0x84, 0x36, 0x32, 0x56, 0xa4, 0x08, 0xb2, 0xd9, 0xd8,
	0x3c, 0xf6, 0x00, 0x3e, 0x8b, 0x66, 0x62, 0x43, 0xdb, 0xa9, 0x0c, 0x39, 0x29, 0xf9, 0xa9, 0xc7,
	0x66, 0xdd, 0x0d, 0x3d, 0x07, 0x49, 0x43, 0x31, 0x10, 0x21, 0x99, 0xcb, 0x39, 0xc8, 0x2d, 0x37,
	0xc6, 0x4b, 0xe8, 0x5d, 0x15, 0xab, 0x40, 0x90, 0x79, 0x10, 0xf8, 0x01, 0x3e, 0x83, 0x8e, 0x6b,
	0xa6, 0x78, 0x1c, 0x91, 0x05, 0x4f, 0xc2, 0x8f, 0x5c, 0x14, 0x37, 0x1d, 0xa0, 0xb7, 0xe8, 0xa3,
	0xb0, 0x24, 0x01, 0x7e, 0x15, 0x54, 0x74, 0xa2, 0x9c, 0xe0, 0x49, 0x90, 0x22, 0x96, 0x24, 0x39,
	0xc3, 0x2b, 0xe8, 0xe4, 0x98, 0x02, 0x35, 0xbd, 0x58, 0x5b, 0x82, 0x7d, 0xda, 0x46, 0x6a, 0x2d,
	0x07, 0xbb, 0xcc, 0x48, 0xde, 0x61, 0xe4, 0x94, 0xcf, 0x8c, 0xfb, 0xce, 0xb0, 0x01, 0x59, 0x1a,
	0x62, 0x03, 0x97, 0x14, 0xa6, 0xb8, 0x8e, 0x25, 0xa7, 0x92, 0x93, 0xd3, 0x3e, 0x29, 0x19, 0xd2,
	0xe0, 0x8e, 0x93, 0xaf, 0x5f, 0x0a, 0x79, 0x3e, 0xe3, 0x39, 0x79, 0xa8, 0xee, 0xb2, 0xbd, 0x82,
	0x66, 0x3b, 0x52, 0x67, 0xe2, 0xf7, 0x7c, 0x6a, 0x1c, 0x00, 0xc2, 0xb3, 0x68, 0x66, 0x4f, 0xb4,
	0x69, 0x9a, 0x4a, 0x4e, 0x88, 0x9f, 0xec, 0x9e, 0x68, 0xef, 0xa6, 0x99, 0x48, 0x2a, 0x9a, 0x3a,
	0xb3, 0xb3, 0x99, 0x48, 0xaa, 0x5d, 0x3e, 0x12, 0xf5, 0xf6, 0x24, 0x27, 0xcb, 0x43, 0xd1, 0xe7,
	0x7b, 0x23, 0x91, 0x62, 0x92, 0x93, 0x95, 0xa1, 0xe8, 0x21, 0x1b, 0x89, 0x80, 0xc7, 0xfb, 0x43,
	0x11, 0xd0, 0x68, 0xa3, 0x92, 0x91, 0x11, 0x35, 0x61, 0x6c, 0xa9, 0xe4, 0x86, 0x9c, 0xab, 0x16,
	0x56, 0x8b, 0x37, 0xee, 0x4c, 0xd8, 0x75, 0x6a, 0x2d, 0x19, 0xb5, 0xc2, 0xd8, 0x36, 0xb8, 0x59,
	0x3f, 0xf6, 0xfd, 0xb3, 0xca, 0x54, 0x13, 0x99, 0x21, 0xe2, 0x12, 0x25, 0x06, 0xb0, 0xdf, 0xa0,
	0x50, 0xcb, 0x3e, 0x51, 0x00, 0xf9, 0x52, 0xfd, 0x0a, 0x95, 0xb4, 0x1b, 0xa6, 0x82, 0x72, 0x66,
	0x19, 0xa9, 0x00, 0x89, 0x9b, 0xaf, 0x49, 0x02, 0x7a, 0x53, 0xad, 0x1e, 0xc5, 0xa9, 0xb2, 0x59,
	0xf4, 0x62, 0xe6, 0x0e, 0x7a, 0xc7, 0x7d, 0x74, 0x2c, 0x88, 0x8d, 0x25, 0x55, 0xf0, 0x7a, 0x7d,
	0x22, 0xaf, 0x1b, 0xb1, 0xc9, 0x7d, 0x82, 0x13, 0x5c, 0x46, 0x45, 0xf7, 0x4b, 0x25, 0xa7, 0x11,
	0xbf, 0x45, 0xce, 0xfb, 0xa2, 0x70, 0x50, 0x83, 0x3f, 0xe0, 0xb7, 0x5c, 0xcd, 0xc8, 0x84, 0x32,
	0xce, 0xb5, 0x30, 0x86, 0x5c, 0xf0, 0x62, 0x99, 0xd4, 0x3d, 0x80, 0x57, 0xd1, 0x62, 0xa2, 0xe3,
	0xa7, 0xfb, 0x74, 0x4c, 0xe9, 0xa2, 0xef, 0x14, 0x80, 0x37, 0x86, 0x9a, 0x2b, 0x68, 0xd6, 0x08,
	0x3d, 0x10, 0x9a, 0xca, 0x84, 0xfc, 0x9f, 0x2f, 0x1e, 0x0f, 0x34, 0x12, 0xb7, 0xa0, 0x11, 0x0b,
	0xa8, 0xe9, 0xb1, 0xeb, 0xe4, 0xff, 0xfd, 0x82, 0x46, 0x2c, 0x68, 0xf5, 0xd8, 0x75, 0xb7, 0xc5,
	0x9d, 0xc8, 0x91, 0xbb, 0xe4, 0x77, 0x57, 0xc4, 0x02, 0xc7, 0xac, 0x8a, 0x8a, 0x42, 0x0d, 0xa4,
	0x8e, 0x95, 0x6b, 0x68, 0xe4, 0x03, 0xdf, 0x79, 0xc6, 0x20, 0xbc, 0x8c, 0x66, 0xa0, 0x59, 0x6a,
	0xa1, 0xc9, 0xaa, 0x8f, 0x98, 0x8f, 0x5d, 0xef, 0x0b, 0x5c, 0x82, 0xf5, 0x3e, 0xb9, 0xec, 0x03,
	0x66, 0x43, 0x67, 0x15, 0x32, 0xd5, 0x4d, 0x59, 0x57, 0x90, 0x2b, 0xde, 0x2a, 0x1f, 0xc3, 0x4e,
	0x17, 0x5d, 0xb7, 0x63, 0x3f, 0xcc, 0x76, 0x3a, 0x8c, 0xf0, 0x22, 0x9a, 0x8e, 0x82, 0x80, 0x5c,
	0x05, 0xd0, 0x7d, 0x02, 0xa2, 0x02, 0x72, 0x2d, 0x43, 0x54, 0x80, 0x2f, 0xa0, 0x52, 0xc4, 0x54,
	0xda, 0x61, 0x81, 0x4d, 0x1d, 0xa3, 0x9a, 0x6f, 0xe7, 0xe3, 0x98, 0xcb, 0x76, 0x10, 0x4a, 0x57,
	0x5a, 0x86, 0xf7, 0xc9, 0x5a, 0xb6, 0x18, 0x80, 0xb4, 0x78, 0xdf, 0x89, 0x8d, 0x8d, 0xb5, 0xf0,
	0x2d, 0xe5, 0x23, 0x2f, 0x06, 0x04, 0x9a, 0x4a, 0x15, 0x95, 0xbc, 0xd8, 0x75, 0x0e, 0xc9, 0xc9,
	0x75, 0x5f, 0x98, 0x80, 0xd5, 0x93, 0xa4, 0x01, 0x67, 0x8a, 0x11, 0x06, 0x3a, 0x0a, 0x4c, 0x97,
	0xdc, 0xf0, 0x24, 0x32, 0x70, 0xc3, 0x61, 0xf8, 0x63, 0xb4, 0xd4, 0x0d, 0xe3, 0x36, 0x0b, 0xe9,
	0x41, 0xdd, 0x9b, 0x70, 0xb0, 0x9c, 0x78, 0xf9, 0xac, 0x32, 0x2d, 0x95, 0x6d, 0x62, 0xaf, 0xd4,
	0x1a, 0x37, 0x3d, 0x87, 0x50, 0x92, 0x9a, 0x5e, 0xb6, 0x31, 0x7e, 0xe2, 0x09, 0x3a, 0xc4, 0xef,
	0x8b, 0x73, 0x08, 0xb9, 0x13, 0x91, 0x9a, 0xc4, 0xad, 0xd8, 0x2d, 0x2f, 0x76, 0x48, 0xcb, 0x01,
	0xf8, 0x12, 0x5a, 0xf0, 0x87, 0xc9, 0x48, 0xe7, 0xa7, 0xa0, 0x33, 0x07, 0xe7, 0xc9, 0x50, 0xaf,
	0x82, 0x8a, 0x5c, 0x0c, 0x64, 0x90, 0xe5, 0xe1, 0x67, 0x7e, 0x9a, 0x1e, 0xca, 0xbb, 0x6b, 0xa6,
	0x00, 0x27, 0xe2, 0xed, 0x71, 0x05, 0x38, 0xf9, 0x2e, 0xa3, 0x45, 0x38, 0x8a, 0xa4, 0xea, 0x52,
	0xa1, 0xdc, 0x59, 0xce, 0xc9, 0xc7, 0xbe, 0xb9, 0xe6, 0xf8, 0x3d, 0x0f, 0xe3, 0x27, 0xa8, 0xf8,
	0x75, 0xac, 0x04, 0x8d, 0x3b, 0x1d, 0x23, 0x2c, 0xb9, 0x33, 0xd1, 0x56, 0xce, 0x6f, 0x0a, 0xb5,
	0xc6, 0x70, 0x2b, 0x23, 0xe7, 0xed, 0x11, 0x38, 0x73, 0x3c, 0x83, 0x50, 0x06, 0x7d, 0x1a, 0xb2,
	0xb6, 0x08, 0xc9, 0x5d, 0xcf, 0x13, 0xa0, 0x2d, 0x87, 0xb8, 0x84, 0xa5, 0x46, 0x68, 0xca, 0xba,
	0x2e, 0x19, 0x3f, 0xf7, 0x09, 0x73, 0x48, 0xdd, 0x01, 0x6e, 0x39, 0x59, 0x60, 0xe5, 0x40, 0xda,
	0x7d, 0xda, 0x97, 0x8a, 0x93, 0x5f, 0xf8, 0xe5, 0xcc, 0xc1, 0xfb, 0x52, 0x71, 0x57, 0xcf, 0x5c,
	0x88, 0x24, 0x94, 0xaa, 0x4f, 0x3e, 0xf1, 0xf5, 0x9c, 0x8f, 0x1d, 0x01, 0x23, 0x98, 0x0e, 0x7a,
	0xd4, 0xdd, 0x3c, 0xc8, 0x2f, 0xb3, 0x82, 0x01, 0x68, 0x47, 0xe8, 0xc8, 0x45, 0xf0, 0x0c, 0xfd,
	0xad, 0x43, 0x93, 0x5f, 0xf9, 0x08, 0x00, 0x36, 0x3d, 0xe6, 0xb2, 0x29, 0xa3, 0x44, 0x67, 0xc5,
	0xd2, 0x66, 0x46, 0x70, 0x52, 0x87, 0x0b, 0xcd, 0xc2, 0x08, 0x5f, 0x77, 0x30, 0xbe, 0x8a, 0x50,
	0x47, 0xb3, 0x94, 0x7b, 0xba, 0xeb, 0xd5, 0xc2, 0xea, 0xdc, 0xfa, 0xdc, 0xcb, 0x67, 0x95, 0xd9,
	0x4f, 0x1d, 0xea, 0xf8, 0x36, 0x67, 0x3b, 0xf9, 0xa7, 0x6b, 0x0b, 0x41, 0x92, 0xfa, 0x45, 0xdc,
	0xc8, 0x76, 0x69, 0x92, 0xc2, 0x0a, 0x5e, 0x44, 0x73, 0x3d, 0xa6, 0xf9, 0x1e, 0xcb, 0x77, 0xc3,
	0xa6, 0x27, 0x96, 0x83, 0x50, 0x07, 0xe7, 0x51, 0x49, 0x09, 0xbb, 0x17, 0xeb, 0xbe, 0xf7, 0x71,
	0xcf, 0xf7, 0x88, 0x0c, 0x03, 0x3f, 0x8f, 0x5d, 0x5b, 0x0a, 0xb4, 0x70, 0x1d, 0x90, 0x7c, 0xfa,
	0xa6, 0x8b, 0x3b, 0xe3, 0x7d, 0xf9, 0xc3, 0x54, 0x1a, 0x2a, 0xa3, 0x24, 0xd6, 0x56, 0x70, 0xf2,
	0x19, 0xa4, 0x03, 0x49, 0xd3, 0xc8, 0x10, 0x7c, 0x0d, 0x9d, 0x92, 0x86, 0x66, 0x2d, 0xd1, 0xc6,
	0xd9, 0x17, 0xf9, 0x1c, 0x14, 0x17, 0xa5, 0x69, 0xc1, 0x78, 0x27, 0xf6, 0xbf, 0xf8, 0x36, 0x3a,
	0x7b, 0x84, 0x7a, 0x96, 0xec, 0x06, 0x18, 0x9d, 0x3e, 0x6c, 0xe4, 0x53, 0xbe, 0x81, 0x7c, 0x45,
	0xc1, 0xb6, 0x22, 0x5f, 0xc0, 0x14, 0x97, 0x6b, 0xfe, 0x58, 0xaf, 0xe5, 0x37, 0xd5, 0xda, 0x4e,
	0x7e, 0x53, 0x5d, 0x9f, 0x71, 0x33, 0xf9, 0xf6, 0x9f, 0x95, 0x02, 0x74, 0x9e, 0xa0, 0xef, 0x24,
	0xf8, 0x33, 0x54, 0xca, 0x6e, 0x7e, 0x82, 0x53, 0x66, 0xc9, 0xfd, 0x09, 0xdc, 0x14, 0x87, 0x96,
	0x75, 0x8b, 0x9b, 0x08, 0x77, 0xa4, 0x36, 0x76, 0xd8, 0x5b, 0x80, 0xd5, 0xd6, 0x04, 0xee, 0x16,
	0xc1, 0x3e, 0x6b, 0x3b, 0x40, 0xee, 0x22, 0x9a, 0xf3, 0x3e, 0xf3, 0x8e, 0xfe, 0xc0, 0xd7, 0x02,
	0x80, 0x1b, 0x59, 0x5b, 0xbf, 0x82, 0x4e, 0x7a, 0xa5, 0xf1, 0xce, 0xf0, 0xd0, 0xef, 0x79, 0x10,
	0x6c, 0x8e, 0xda, 0xc3, 0x85, 0xdc, 0x61, 0x7e, 0xb9, 0x7c, 0xe4, 0x0b, 0x07, 0xc0, 0x47, 0xfe,
	0x86, 0x79, 0x0f, 0x15, 0xb5, 0x08, 0x84, 0x1c, 0xf8, 0x84, 0x6c, 0x4f, 0x30, 0x03, 0x94, 0x1b,
	0xd6, 0x2d, 0xde, 0x42, 0x0b, 0x81, 0x16, 0x70, 0x39, 0x66, 0xbe, 0xf3, 0x91, 0x5f, 0x4f, 0xe0,
	0x6a, 0x2e, 0x33, 0xae, 0x43, 0x7b, 0xc4, 0xdb, 0xe8, 0x24, 0x74, 0xd0, 0x03, 0xc9, 0x6d, 0x4e,
	0xe0, 0x0f, 0x1a, 0xf0, 0x78, 0x6e, 0xef, 0xa3, 0xf9, 0x54, 0x1d, 0x58, 0xfa, 0xd6, 0x24, 0xf4,
	0xc6, 0x6c, 0xeb, 0xd6, 0x39, 0xd3, 0xe2, 0x80, 0xb3, 0x9d, 0x49, 0x9c, 0x8d, 0xd9, 0xd6, 0x2d,
	0x7e, 0x82, 0xce, 0x30, 0x6b, 0xb5, 0x6c, 0xa7, 0xd6, 0x4d, 0x35, 0x4d, 0x78, 0x96, 0x45, 0xb2,
	0x3b, 0x81, 0xd3, 0xa5, 0x31, 0x1f, 0xbb, 0xde, 0x45, 0xdd, 0xe2, 0x1a, 0x9a, 0xcf, 0x53, 0x18,
	0x0a, 0xd5, 0xb5, 0x3d, 0xf2, 0xf8, 0xe0, 0xe1, 0x97, 0x1f, 0xa3, 0x5b, 0x20, 0xc5, 0x0c, 0x95,
	0x12, 0xa9, 0xba, 0xee, 0xea, 0x48, 0xad, 0x0d, 0xc9, 0x97, 0xc0, 0xe0, 0xf6, 0xa4, 0x8d, 0x64,
	0x33, 0xd5, 0xcc, 0x11, 0xc9, 0x6f, 0x7d, 0xb9, 0xcf, 0x1d, 0x1b, 0xe2, 0xa7, 0x88, 0xf8, 0x6d,
	0x3c, 0x3e, 0xe9, 0x3d, 0xa9, 0x78, 0xbc, 0x47, 0x7e, 0xf3, 0x56, 0xc2, 0x9d, 0x01, 0xff, 0xf5,
	0x91, 0xfb, 0x2f, 0xc1, 0x3b, 0xfe, 0x73, 0x01, 0x9d, 0x1b, 0xeb, 0xef, 0x47, 0xc4, 0xff, 0xed,
	0x5b, 0x89, 0xbf, 0x32, 0x0a, 0xf2, 0x2a, 0x89, 0xbf, 0x14, 0x50, 0xb9, 0x23, 0x55, 0x57, 0xe8,
	0x44, 0x4b, 0x65, 0x8f, 0x62, 0xf1, 0xe4, 0xad, 0xb0, 0x78, 0x7f, 0x2c, 0xca, 0xab, 0x34, 0xbe,
	0x29, 0xa0, 0xaa, 0xdb, 0x71, 0xa3, 0xe0, 0x47, 0x10, 0xf9, 0xdd, 0x5b, 0x21, 0x52, 0x3e, 0x10,
	0xe7, 0x55, 0x2a, 0x4f, 0x11, 0x91, 0x0a, 0x4e, 0x7a, 0x41, 0xe1, 0x92, 0xc0, 0x45, 0x47, 0x2a,
	0xe9, 0x34, 0xc8, 0x57, 0x6f, 0xa7, 0x20, 0x72, 0xff, 0xbb, 0x46, 0xe8, 0xcd, 0xa1, 0x77, 0xfc,
	0x35, 0xc2, 0x09, 0xd3, 0x56, 0x09, 0x4d, 0x13, 0xa6, 0x59, 0x24, 0xac, 0xd0, 0x86, 0xfc, 0xbe,
	0x3a, 0xbd, 0x5a, 0xbc, 0x71, 0x7f, 0xd2, 0x97, 0x96, 0x7b, 0xd2, 0xd4, 0xb6, 0xbd, 0xbb, 0xed,
	0xa1, 0xb7, 0x7b, 0xae, 0x67, 0x37, 0x4f, 0x26, 0x87, 0x71, 0xfc, 0x74, 0x14, 0xdb, 0xf0, 0xbe,
	0x8f, 0x6f, 0xc8, 0x1f, 0x20, 0xf6, 0x17, 0x6f, 0x12, 0xbb, 0xc5, 0xfb, 0x10, 0x26, 0x0b, 0xbd,
	0x98, 0x1c, 0x82, 0xb1, 0x45, 0x8b, 0x49, 0xda, 0x0e, 0xa5, 0xe9, 0xe5, 0xf3, 0x36, 0x84, 0x42,
	0xdc, 0xc6, 0x8f, 0x8b, 0x9b, 0x3b, 0x1b, 0x0f, 0xbb, 0x90, 0x1c, 0x44, 0xf1, 0x5f, 0x0b, 0x68,
	0x85, 0xef, 0x2b, 0x16, 0xc9, 0x80, 0xe6, 0xf6, 0xe3, 0x59, 0xff, 0x23, 0x30, 0x68, 0xfd, 0x28,
	0x06, 0x9b, 0xde, 0xef, 0x46, 0x06, 0x1e, 0xce, 0xfe, 0x59, 0xfe, 0xdf, 0xe4, 0x6e, 0x15, 0x58,
	0x22, 0xe9, 0x81, 0x2a, 0x30, 0x84, 0xbd, 0xc1, 0x2a, 0xd4, 0x13, 0x39, 0x5e, 0x04, 0xf9, 0x2a,
	0xb0, 0x43, 0xb0, 0x7b, 0x9c, 0x30, 0x4e, 0x47, 0x9d, 0xc2, 0x64, 0x8f, 0x93, 0xf6, 0xa1, 0xc7,
	0x09, 0xe3, 0x8d, 0x91, 0x8e, 0x7f, 0x9c, 0x5c, 0x45, 0x98, 0x71, 0x9a, 0x3f, 0xcc, 0xb3, 0x4b,
	0x20, 0x09, 0xe0, 0x68, 0x5f, 0x64, 0xbc, 0xe9, 0x05, 0x0f, 0x3d, 0xee, 0x1e, 0x23, 0x63, 0xda,
	0xa9, 0x92, 0x96, 0x70, 0xff, 0x18, 0x19, 0xaa, 0xee, 0x2a, 0x69, 0xf1, 0x47, 0x40, 0x28, 0xd7,
	0x4b, 0x42, 0x16, 0xc0, 0x1f, 0x6c, 0x44, 0x80, 0x32, 0x1e, 0x2a, 0x6f, 0xe7, 0x12, 0x7c, 0x03,
	0x9d, 0x66, 0x9c, 0x46, 0x82, 0x4b, 0xd8, 0x6c, 0xce, 0xc6, 0x76, 0x62, 0x1d, 0x91, 0x0e, 0x98,
	0x9c, 0x62, 0xfc, 0x41, 0x2e, 0xdb, 0xce, 0x44, 0xcb, 0x9b, 0xe8, 0xcc, 0xd1, 0x7b, 0xc4, 0x3d,
	0x34, 0xfb, 0x62, 0x1f, 0xfe, 0x40, 0x9c, 0x6d, 0xba, 0x4f, 0xbc, 0x84, 0xde, 0x1d, 0xb0, 0x30,
	0x15, 0xd9, 0x1f, 0x86, 0x7e, 0x70, 0xe7, 0x9d, 0xdb, 0x85, 0xe5, 0x0d, 0x74, 0xfa, 0xc8, 0x6a,
	0x9f, 0xc8, 0xc9, 0x3a, 0x5a, 0x3a, 0xaa, 0x74, 0x27, 0xf2, 0xb1, 0x85, 0xca, 0xff, 0xbb, 0xf8,
	0x26, 0x9d, 0xd6, 0x91, 0xe5, 0x33, 0x89, 0x93, 0x3b, 0x33, 0xdf, 0x7c, 0x57, 0x99, 0xfa, 0xf7,
	0xdf, 0x2a, 0x53, 0x17, 0x28, 0x42, 0xa3, 0xbf, 0x7f, 0x9c, 0x85, 0x8c, 0x84, 0x34, 0xa4, 0x50,
	0x9d, 0x76, 0x16, 0x30, 0x70, 0x68, 0x24, 0x24, 0x37, 0xe4, 0x1d, 0x8f, 0xc2, 0x00, 0xaf, 0xa0,
	0xd9, 0xec, 0x76, 0x29, 0x39, 0xfc, 0x0f, 0x0b, 0x6f, 0x2d, 0x07, 0x34, 0xf8, 0x28, 0xc0, 0xfa,
	0xa5, 0xef, 0x9f, 0x97, 0x0b, 0x3f, 0x3c, 0x2f, 0x17, 0xfe, 0xf5, 0xbc, 0x3c, 0xf5, 0xed, 0x8b,
	0xf2, 0xd4, 0x77, 0x2f, 0xca, 0x85, 0x1f, 0x5e, 0x94, 0xa7, 0xfe, 0xf1, 0xa2, 0x3c, 0xf5, 0x64,
	0x26, 0xdf, 0x18, 0xed, 0xe3, 0x70, 0x73, 0xb9, 0xf9, 0x9f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x87,
	0x96, 0x04, 0xe2, 0x73, 0x17, 0x00, 0x00,
}

func (m *Data) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Data) MarshalTo(dAtA []byte) (int, error) {
	size := m.ProtoSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Data) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AdMediationPlatform) > 0 {
		i -= len(m.AdMediationPlatform)
		copy(dAtA[i:], m.AdMediationPlatform)
		i = encodeVarintGenerated(dAtA, i, uint64(len(m.AdMediationPlatform)))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xb2
	}
	if len(m.AdRevenuePlacement) > 0 {
		i -= len(m.AdRevenuePlacement)
		copy(dAtA[i:], m.AdRevenuePlacement)
		i = encodeVarintGenerated(dAtA, i, uint64(len(m.AdRevenuePlacement)))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xaa
	}
	if len(m.AdRevenueUnit) > 0 {
		i -= len(m.AdRevenueUnit)
		copy(dAtA[i:], m.AdRevenueUnit)
		i = encodeVarintGenerated(dAtA, i, uint64(len(m.AdRevenueUnit)))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xa2
	}
	if len(m.AdRevenueNetwork) > 0 {
		i -= len(m.AdRevenueNetwork)
		copy(dAtA[i:], m.AdRevenueNetwork)
		i = encodeVarintGenerated(dAtA, i, uint64(len(m.AdRevenueNetwork)))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0x9a
	}
	if m.AdImpressionsCount != 0 {
		i = encodeVarintGenerated(dAtA, i, uint64(m.AdImpressionsCount))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0x90
	}
	if len(m.ApiPartnerParams) > 0 {
		for k := range m.ApiPartnerParams {
			v := m.ApiPartnerParams[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintGenerated(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintGenerated(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintGenerated(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x6
			i--
			dAtA[i] = 0x8a
		}
	}
	if len(m.DynamicCallbackParameters) > 0 {
		for k := range m.DynamicCallbackParameters {
			v := m.DynamicCallbackParameters[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintGenerated(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintGenerated(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintGenerated(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x6
			i--
			dAtA[i] = 0x82
		}
	}
	if len(m.PublisherParams) > 0 {
		for k := range m.PublisherParams {
			v := m.PublisherParams[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintGenerated(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintGenerated(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintGenerated(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x5
			i--
			dAtA[i] = 0xfa
		}
	}
	if len(m.PartnerSdkParams) > 0 {
		for k := range m.PartnerSdkParams {
			v := m.PartnerSdkParams[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintGenerated(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintGenerated(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintGenerated(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x5
			i--
			dAtA[i] = 0xf2
		}
	}
	if len(m.PartnerParameters) > 0 {
		for k := range m.PartnerParameters {
			v := m.PartnerParameters[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintGenerated(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintGenerated(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintGenerated(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x5
			i--
			dAtA[i] = 0xea
		}
	}
	{
		size, err := m.InactiveUserDefinition.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x5
	i--
	dAtA[i] = 0xe2
	{
		size, err := m.ReattributionAttributionWindow.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x5
	i--
	dAtA[i] = 0xda
	{
		size, err := m.FingerprintAttributionWindow.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x5
	i--
	dAtA[i] = 0xd2
	{
		size, err := m.ImpressionAttributionWindow.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x5
	i--
	dAtA[i] = 0xca
	{
		size, err := m.ClickAttributionWindow.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x5
	i--
	dAtA[i] = 0xc2
	{
		size, err := m.PingbackTtl.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x5
	i--
	dAtA[i] = 0xba
	if m.SessionLength != 0 {
		i = encodeVarintGenerated(dAtA, i, uint64(m.SessionLength))
		i--
		dAtA[i] = 0x5
		i--
		dAtA[i] = 0xb0
	}
	n7, err7 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.AttributionUpdatedAt, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.AttributionUpdatedAt):])
	if err7 != nil {
		return 0, err7
	}
	i -= n7
	i = encodeVarintGenerated(dAtA, i, uint64(n7))
	i--
	dAtA[i] = 0x5
	i--
	dAtA[i] = 0xaa
	n8, err8 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.ReinstalledAt, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.ReinstalledAt):])
	if err8 != nil {
		return 0, err8
	}
	i -= n8
	i = encodeVarintGenerated(dAtA, i, uint64(n8))
	i--
	dAtA[i] = 0x5
	i--
	dAtA[i] = 0xa2
	n9, err9 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.UninstalledAt, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.UninstalledAt):])
	if err9 != nil {
		return 0, err9
	}
	i -= n9
	i = encodeVarintGenerated(dAtA, i, uint64(n9))
	i--
	dAtA[i] = 0x5
	i--
	dAtA[i] = 0x9a
	n10, err10 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.LastSessionTime, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.LastSessionTime):])
	if err10 != nil {
		return 0, err10
	}
	i -= n10
	i = encodeVarintGenerated(dAtA, i, uint64(n10))
	i--
	dAtA[i] = 0x5
	i--
	dAtA[i] = 0x92
	n11, err11 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.CreatedAtTime, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.CreatedAtTime):])
	if err11 != nil {
		return 0, err11
	}
	i -= n11
	i = encodeVarintGenerated(dAtA, i, uint64(n11))
	i--
	dAtA[i] = 0x5
	i--
	dAtA[i] = 0x8a
	n12, err12 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.ReceivedAt, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.ReceivedAt):])
	if err12 != nil {
		return 0, err12
	}
	i -= n12
	i = encodeVarintGenerated(dAtA, i, uint64(n12))
	i--
	dAtA[i] = 0x5
	i--
	dAtA[i] = 0x82
	if len(m.FirstOsName) > 0 {
		i -= len(m.FirstOsName)
		copy(dAtA[i:], m.FirstOsName)
		i = encodeVarintGenerated(dAtA, i, uint64(len(m.FirstOsName)))
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0xfa
	}
	if len(m.FirstDeviceType) > 0 {
		i -= len(m.FirstDeviceType)
		copy(dAtA[i:], m.FirstDeviceType)
		i = encodeVarintGenerated(dAtA, i, uint64(len(m.FirstDeviceType)))
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0xf2
	}
	if len(m.FirstCountry) > 0 {
		i -= len(m.FirstCountry)
		copy(dAtA[i:], m.FirstCountry)
		i = encodeVarintGenerated(dAtA, i, uint64(len(m.FirstCountry)))
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0xea
	}
	n13, err13 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.FirstSessionTime, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.FirstSessionTime):])
	if err13 != nil {
		return 0, err13
	}
	i -= n13
	i = encodeVarintGenerated(dAtA, i, uint64(n13))
	i--
	dAtA[i] = 0x4
	i--
	dAtA[i] = 0xe2
	n14, err14 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.InstalledAt, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.InstalledAt):])
	if err14 != nil {
		return 0, err14
	}
	i -= n14
	i = encodeVarintGenerated(dAtA, i, uint64(n14))
	i--
	dAtA[i] = 0x4
	i--
	dAtA[i] = 0xda
	n15, err15 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.ClickTime, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.ClickTime):])
	if err15 != nil {
		return 0, err15
	}
	i -= n15
	i = encodeVarintGenerated(dAtA, i, uint64(n15))
	i--
	dAtA[i] = 0x4
	i--
	dAtA[i] = 0xd2
	if m.IsServerToServerBased {
		i--
		if m.IsServerToServerBased {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0xc8
	}
	if m.IsServerToServer {
		i--
		if m.IsServerToServer {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0xc0
	}
	if m.IsImported {
		i--
		if m.IsImported {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0xb8
	}
	{
		size, err := m.SecretId.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x4
	i--
	dAtA[i] = 0xb2
	if len(m.NetworkType) > 0 {
		i -= len(m.NetworkType)
		copy(dAtA[i:], m.NetworkType)
		i = encodeVarintGenerated(dAtA, i, uint64(len(m.NetworkType)))
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0xaa
	}
	if len(m.HardwareName) > 0 {
		i -= len(m.HardwareName)
		copy(dAtA[i:], m.HardwareName)
		i = encodeVarintGenerated(dAtA, i, uint64(len(m.HardwareName)))
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0xa2
	}
	if len(m.CpuType) > 0 {
		i -= len(m.CpuType)
		copy(dAtA[i:], m.CpuType)
		i = encodeVarintGenerated(dAtA, i, uint64(len(m.CpuType)))
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0x9a
	}
	if m.FraudKind != 0 {
		i = encodeVarintGenerated(dAtA, i, uint64(m.FraudKind))
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0x90
	}
	if m.ImpressionBased {
		i--
		if m.ImpressionBased {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0x88
	}
	if len(m.ClickReferer) > 0 {
		i -= len(m.ClickReferer)
		copy(dAtA[i:], m.ClickReferer)
		i = encodeVarintGenerated(dAtA, i, uint64(len(m.ClickReferer)))
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0x82
	}
	if len(m.SearchTerm) > 0 {
		i -= len(m.SearchTerm)
		copy(dAtA[i:], m.SearchTerm)
		i = encodeVarintGenerated(dAtA, i, uint64(len(m.SearchTerm)))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xfa
	}
	if len(m.Deeplink) > 0 {
		i -= len(m.Deeplink)
		copy(dAtA[i:], m.Deeplink)
		i = encodeVarintGenerated(dAtA, i, uint64(len(m.Deeplink)))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xf2
	}
	if len(m.ActivityKind) > 0 {
		i -= len(m.ActivityKind)
		copy(dAtA[i:], m.ActivityKind)
		i = encodeVarintGenerated(dAtA, i, uint64(len(m.ActivityKind)))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xea
	}
	if len(m.UserAgent) > 0 {
		i -= len(m.UserAgent)
		copy(dAtA[i:], m.UserAgent)
		i = encodeVarintGenerated(dAtA, i, uint64(len(m.UserAgent)))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xe2
	}
	if len(m.ClickLabel) > 0 {
		i -= len(m.ClickLabel)
		copy(dAtA[i:], m.ClickLabel)
		i = encodeVarintGenerated(dAtA, i, uint64(len(m.ClickLabel)))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xda
	}
	{
		size, err := m.ZoneOffset.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x3
	i--
	dAtA[i] = 0xd2
	if len(m.TrackingEnabled) > 0 {
		i -= len(m.TrackingEnabled)
		copy(dAtA[i:], m.TrackingEnabled)
		i = encodeVarintGenerated(dAtA, i, uint64(len(m.TrackingEnabled)))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xca
	}
	if len(m.DeviceType) > 0 {
		i -= len(m.DeviceType)
		copy(dAtA[i:], m.DeviceType)
		i = encodeVarintGenerated(dAtA, i, uint64(len(m.DeviceType)))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xc2
	}
	if len(m.DeviceName) > 0 {
		i -= len(m.DeviceName)
		copy(dAtA[i:], m.DeviceName)
		i = encodeVarintGenerated(dAtA, i, uint64(len(m.DeviceName)))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xba
	}
	if len(m.LastTimeSpent) > 0 {
		i -= len(m.LastTimeSpent)
		copy(dAtA[i:], m.LastTimeSpent)
		i = encodeVarintGenerated(dAtA, i, uint64(len(m.LastTimeSpent)))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xb2
	}
	if len(m.TimeSpent) > 0 {
		i -= len(m.TimeSpent)
		copy(dAtA[i:], m.TimeSpent)
		i = encodeVarintGenerated(dAtA, i, uint64(len(m.TimeSpent)))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xaa
	}
	if len(m.PushToken) > 0 {
		i -= len(m.PushToken)
		copy(dAtA[i:], m.PushToken)
		i = encodeVarintGenerated(dAtA, i, uint64(len(m.PushToken)))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xa2
	}
	if m.GlobalSessionCount != 0 {
		i = encodeVarintGenerated(dAtA, i, uint64(m.GlobalSessionCount))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0x98
	}
	if len(m.SessionCount) > 0 {
		i -= len(m.SessionCount)
		copy(dAtA[i:], m.SessionCount)
		i = encodeVarintGenerated(dAtA, i, uint64(len(m.SessionCount)))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0x92
	}
	if len(m.StoreAppId) > 0 {
		i -= len(m.StoreAppId)
		copy(dAtA[i:], m.StoreAppId)
		i = encodeVarintGenerated(dAtA, i, uint64(len(m.StoreAppId)))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0x8a
	}
	if len(m.StoreName) > 0 {
		i -= len(m.StoreName)
		copy(dAtA[i:], m.StoreName)
		i = encodeVarintGenerated(dAtA, i, uint64(len(m.StoreName)))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0x82
	}
	if len(m.ClientSdk) > 0 {
		i -= len(m.ClientSdk)
		copy(dAtA[i:], m.ClientSdk)
		i = encodeVarintGenerated(dAtA, i, uint64(len(m.ClientSdk)))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xfa
	}
	if len(m.Manufacturer) > 0 {
		i -= len(m.Manufacturer)
		copy(dAtA[i:], m.Manufacturer)
		i = encodeVarintGenerated(dAtA, i, uint64(len(m.Manufacturer)))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xf2
	}
	if len(m.Mnc) > 0 {
		i -= len(m.Mnc)
		copy(dAtA[i:], m.Mnc)
		i = encodeVarintGenerated(dAtA, i, uint64(len(m.Mnc)))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xea
	}
	if len(m.Mcc) > 0 {
		i -= len(m.Mcc)
		copy(dAtA[i:], m.Mcc)
		i = encodeVarintGenerated(dAtA, i, uint64(len(m.Mcc)))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xe2
	}
	if len(m.Region) > 0 {
		i -= len(m.Region)
		copy(dAtA[i:], m.Region)
		i = encodeVarintGenerated(dAtA, i, uint64(len(m.Region)))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xda
	}
	if len(m.Language) > 0 {
		i -= len(m.Language)
		copy(dAtA[i:], m.Language)
		i = encodeVarintGenerated(dAtA, i, uint64(len(m.Language)))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xd2
	}
	if len(m.Country) > 0 {
		i -= len(m.Country)
		copy(dAtA[i:], m.Country)
		i = encodeVarintGenerated(dAtA, i, uint64(len(m.Country)))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xca
	}
	if len(m.Referrer) > 0 {
		i -= len(m.Referrer)
		copy(dAtA[i:], m.Referrer)
		i = encodeVarintGenerated(dAtA, i, uint64(len(m.Referrer)))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xc2
	}
	if len(m.Environment) > 0 {
		i -= len(m.Environment)
		copy(dAtA[i:], m.Environment)
		i = encodeVarintGenerated(dAtA, i, uint64(len(m.Environment)))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xba
	}
	if len(m.MacMd5) > 0 {
		i -= len(m.MacMd5)
		copy(dAtA[i:], m.MacMd5)
		i = encodeVarintGenerated(dAtA, i, uint64(len(m.MacMd5)))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xb2
	}
	if len(m.MacSha1) > 0 {
		i -= len(m.MacSha1)
		copy(dAtA[i:], m.MacSha1)
		i = encodeVarintGenerated(dAtA, i, uint64(len(m.MacSha1)))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xaa
	}
	if len(m.ServerIp) > 0 {
		i -= len(m.ServerIp)
		copy(dAtA[i:], m.ServerIp)
		i = encodeVarintGenerated(dAtA, i, uint64(len(m.ServerIp)))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xa2
	}
	if len(m.ProxyIpAddress) > 0 {
		i -= len(m.ProxyIpAddress)
		copy(dAtA[i:], m.ProxyIpAddress)
		i = encodeVarintGenerated(dAtA, i, uint64(len(m.ProxyIpAddress)))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x9a
	}
	if len(m.IpAddress) > 0 {
		i -= len(m.IpAddress)
		copy(dAtA[i:], m.IpAddress)
		i = encodeVarintGenerated(dAtA, i, uint64(len(m.IpAddress)))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x92
	}
	if len(m.CostIdMd5) > 0 {
		i -= len(m.CostIdMd5)
		copy(dAtA[i:], m.CostIdMd5)
		i = encodeVarintGenerated(dAtA, i, uint64(len(m.CostIdMd5)))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x8a
	}
	{
		size, err := m.Cost.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2
	i--
	dAtA[i] = 0x82
	{
		size, err := m.RevenueData.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xfa
	if len(m.EventToken) > 0 {
		i -= len(m.EventToken)
		copy(dAtA[i:], m.EventToken)
		i = encodeVarintGenerated(dAtA, i, uint64(len(m.EventToken)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xf2
	}
	{
		size, err := m.SimSlotIds.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xea
	if len(m.WinAdid) > 0 {
		i -= len(m.WinAdid)
		copy(dAtA[i:], m.WinAdid)
		i = encodeVarintGenerated(dAtA, i, uint64(len(m.WinAdid)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xe2
	}
	if len(m.WinNaid) > 0 {
		i -= len(m.WinNaid)
		copy(dAtA[i:], m.WinNaid)
		i = encodeVarintGenerated(dAtA, i, uint64(len(m.WinNaid)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xda
	}
	if len(m.WinHwid) > 0 {
		i -= len(m.WinHwid)
		copy(dAtA[i:], m.WinHwid)
		i = encodeVarintGenerated(dAtA, i, uint64(len(m.WinHwid)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xd2
	}
	if len(m.WinUdid) > 0 {
		i -= len(m.WinUdid)
		copy(dAtA[i:], m.WinUdid)
		i = encodeVarintGenerated(dAtA, i, uint64(len(m.WinUdid)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xca
	}
	if len(m.WebUuid) > 0 {
		i -= len(m.WebUuid)
		copy(dAtA[i:], m.WebUuid)
		i = encodeVarintGenerated(dAtA, i, uint64(len(m.WebUuid)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xc2
	}
	if len(m.FireAdid) > 0 {
		i -= len(m.FireAdid)
		copy(dAtA[i:], m.FireAdid)
		i = encodeVarintGenerated(dAtA, i, uint64(len(m.FireAdid)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xba
	}
	if len(m.GoogleAdid) > 0 {
		i -= len(m.GoogleAdid)
		copy(dAtA[i:], m.GoogleAdid)
		i = encodeVarintGenerated(dAtA, i, uint64(len(m.GoogleAdid)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb2
	}
	if len(m.AndroidId) > 0 {
		i -= len(m.AndroidId)
		copy(dAtA[i:], m.AndroidId)
		i = encodeVarintGenerated(dAtA, i, uint64(len(m.AndroidId)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xaa
	}
	if len(m.Idfv) > 0 {
		i -= len(m.Idfv)
		copy(dAtA[i:], m.Idfv)
		i = encodeVarintGenerated(dAtA, i, uint64(len(m.Idfv)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa2
	}
	if len(m.Idfa) > 0 {
		i -= len(m.Idfa)
		copy(dAtA[i:], m.Idfa)
		i = encodeVarintGenerated(dAtA, i, uint64(len(m.Idfa)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x9a
	}
	if len(m.AppVersionShort) > 0 {
		i -= len(m.AppVersionShort)
		copy(dAtA[i:], m.AppVersionShort)
		i = encodeVarintGenerated(dAtA, i, uint64(len(m.AppVersionShort)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x92
	}
	if len(m.AppVersion) > 0 {
		i -= len(m.AppVersion)
		copy(dAtA[i:], m.AppVersion)
		i = encodeVarintGenerated(dAtA, i, uint64(len(m.AppVersion)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x8a
	}
	if len(m.AppName) > 0 {
		i -= len(m.AppName)
		copy(dAtA[i:], m.AppName)
		i = encodeVarintGenerated(dAtA, i, uint64(len(m.AppName)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	if len(m.Random) > 0 {
		i -= len(m.Random)
		copy(dAtA[i:], m.Random)
		i = encodeVarintGenerated(dAtA, i, uint64(len(m.Random)))
		i--
		dAtA[i] = 0x7a
	}
	if len(m.Nonce) > 0 {
		i -= len(m.Nonce)
		copy(dAtA[i:], m.Nonce)
		i = encodeVarintGenerated(dAtA, i, uint64(len(m.Nonce)))
		i--
		dAtA[i] = 0x72
	}
	if len(m.ApiLevel) > 0 {
		i -= len(m.ApiLevel)
		copy(dAtA[i:], m.ApiLevel)
		i = encodeVarintGenerated(dAtA, i, uint64(len(m.ApiLevel)))
		i--
		dAtA[i] = 0x6a
	}
	if len(m.OsBuild) > 0 {
		i -= len(m.OsBuild)
		copy(dAtA[i:], m.OsBuild)
		i = encodeVarintGenerated(dAtA, i, uint64(len(m.OsBuild)))
		i--
		dAtA[i] = 0x62
	}
	if len(m.OsVersion) > 0 {
		i -= len(m.OsVersion)
		copy(dAtA[i:], m.OsVersion)
		i = encodeVarintGenerated(dAtA, i, uint64(len(m.OsVersion)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.OsName) > 0 {
		i -= len(m.OsName)
		copy(dAtA[i:], m.OsName)
		i = encodeVarintGenerated(dAtA, i, uint64(len(m.OsName)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.Adid) > 0 {
		i -= len(m.Adid)
		copy(dAtA[i:], m.Adid)
		i = encodeVarintGenerated(dAtA, i, uint64(len(m.Adid)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.AppToken) > 0 {
		i -= len(m.AppToken)
		copy(dAtA[i:], m.AppToken)
		i = encodeVarintGenerated(dAtA, i, uint64(len(m.AppToken)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.OutdatedTracker) > 0 {
		i -= len(m.OutdatedTracker)
		copy(dAtA[i:], m.OutdatedTracker)
		i = encodeVarintGenerated(dAtA, i, uint64(len(m.OutdatedTracker)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.LastTracker) > 0 {
		i -= len(m.LastTracker)
		copy(dAtA[i:], m.LastTracker)
		i = encodeVarintGenerated(dAtA, i, uint64(len(m.LastTracker)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.InstallTracker) > 0 {
		i -= len(m.InstallTracker)
		copy(dAtA[i:], m.InstallTracker)
		i = encodeVarintGenerated(dAtA, i, uint64(len(m.InstallTracker)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Tracker) > 0 {
		i -= len(m.Tracker)
		copy(dAtA[i:], m.Tracker)
		i = encodeVarintGenerated(dAtA, i, uint64(len(m.Tracker)))
		i--
		dAtA[i] = 0x22
	}
	if m.EngagementType != 0 {
		i = encodeVarintGenerated(dAtA, i, uint64(m.EngagementType))
		i--
		dAtA[i] = 0x18
	}
	if len(m.ReferenceTag) > 0 {
		i -= len(m.ReferenceTag)
		copy(dAtA[i:], m.ReferenceTag)
		i = encodeVarintGenerated(dAtA, i, uint64(len(m.ReferenceTag)))
		i--
		dAtA[i] = 0x12
	}
	if m.TermsSigned {
		i--
		if m.TermsSigned {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SimSlotIds) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SimSlotIds) MarshalTo(dAtA []byte) (int, error) {
	size := m.ProtoSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SimSlotIds) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DeviceId) > 0 {
		i -= len(m.DeviceId)
		copy(dAtA[i:], m.DeviceId)
		i = encodeVarintGenerated(dAtA, i, uint64(len(m.DeviceId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Meids) > 0 {
		for iNdEx := len(m.Meids) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Meids[iNdEx])
			copy(dAtA[i:], m.Meids[iNdEx])
			i = encodeVarintGenerated(dAtA, i, uint64(len(m.Meids[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Imeis) > 0 {
		for iNdEx := len(m.Imeis) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Imeis[iNdEx])
			copy(dAtA[i:], m.Imeis[iNdEx])
			i = encodeVarintGenerated(dAtA, i, uint64(len(m.Imeis[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintGenerated(dAtA []byte, offset int, v uint64) int {
	offset -= sovGenerated(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Data) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TermsSigned {
		n += 2
	}
	l = len(m.ReferenceTag)
	if l > 0 {
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.EngagementType != 0 {
		n += 1 + sovGenerated(uint64(m.EngagementType))
	}
	l = len(m.Tracker)
	if l > 0 {
		n += 1 + l + sovGenerated(uint64(l))
	}
	l = len(m.InstallTracker)
	if l > 0 {
		n += 1 + l + sovGenerated(uint64(l))
	}
	l = len(m.LastTracker)
	if l > 0 {
		n += 1 + l + sovGenerated(uint64(l))
	}
	l = len(m.OutdatedTracker)
	if l > 0 {
		n += 1 + l + sovGenerated(uint64(l))
	}
	l = len(m.AppToken)
	if l > 0 {
		n += 1 + l + sovGenerated(uint64(l))
	}
	l = len(m.Adid)
	if l > 0 {
		n += 1 + l + sovGenerated(uint64(l))
	}
	l = len(m.OsName)
	if l > 0 {
		n += 1 + l + sovGenerated(uint64(l))
	}
	l = len(m.OsVersion)
	if l > 0 {
		n += 1 + l + sovGenerated(uint64(l))
	}
	l = len(m.OsBuild)
	if l > 0 {
		n += 1 + l + sovGenerated(uint64(l))
	}
	l = len(m.ApiLevel)
	if l > 0 {
		n += 1 + l + sovGenerated(uint64(l))
	}
	l = len(m.Nonce)
	if l > 0 {
		n += 1 + l + sovGenerated(uint64(l))
	}
	l = len(m.Random)
	if l > 0 {
		n += 1 + l + sovGenerated(uint64(l))
	}
	l = len(m.AppName)
	if l > 0 {
		n += 2 + l + sovGenerated(uint64(l))
	}
	l = len(m.AppVersion)
	if l > 0 {
		n += 2 + l + sovGenerated(uint64(l))
	}
	l = len(m.AppVersionShort)
	if l > 0 {
		n += 2 + l + sovGenerated(uint64(l))
	}
	l = len(m.Idfa)
	if l > 0 {
		n += 2 + l + sovGenerated(uint64(l))
	}
	l = len(m.Idfv)
	if l > 0 {
		n += 2 + l + sovGenerated(uint64(l))
	}
	l = len(m.AndroidId)
	if l > 0 {
		n += 2 + l + sovGenerated(uint64(l))
	}
	l = len(m.GoogleAdid)
	if l > 0 {
		n += 2 + l + sovGenerated(uint64(l))
	}
	l = len(m.FireAdid)
	if l > 0 {
		n += 2 + l + sovGenerated(uint64(l))
	}
	l = len(m.WebUuid)
	if l > 0 {
		n += 2 + l + sovGenerated(uint64(l))
	}
	l = len(m.WinUdid)
	if l > 0 {
		n += 2 + l + sovGenerated(uint64(l))
	}
	l = len(m.WinHwid)
	if l > 0 {
		n += 2 + l + sovGenerated(uint64(l))
	}
	l = len(m.WinNaid)
	if l > 0 {
		n += 2 + l + sovGenerated(uint64(l))
	}
	l = len(m.WinAdid)
	if l > 0 {
		n += 2 + l + sovGenerated(uint64(l))
	}
	l = m.SimSlotIds.ProtoSize()
	n += 2 + l + sovGenerated(uint64(l))
	l = len(m.EventToken)
	if l > 0 {
		n += 2 + l + sovGenerated(uint64(l))
	}
	l = m.RevenueData.ProtoSize()
	n += 2 + l + sovGenerated(uint64(l))
	l = m.Cost.ProtoSize()
	n += 2 + l + sovGenerated(uint64(l))
	l = len(m.CostIdMd5)
	if l > 0 {
		n += 2 + l + sovGenerated(uint64(l))
	}
	l = len(m.IpAddress)
	if l > 0 {
		n += 2 + l + sovGenerated(uint64(l))
	}
	l = len(m.ProxyIpAddress)
	if l > 0 {
		n += 2 + l + sovGenerated(uint64(l))
	}
	l = len(m.ServerIp)
	if l > 0 {
		n += 2 + l + sovGenerated(uint64(l))
	}
	l = len(m.MacSha1)
	if l > 0 {
		n += 2 + l + sovGenerated(uint64(l))
	}
	l = len(m.MacMd5)
	if l > 0 {
		n += 2 + l + sovGenerated(uint64(l))
	}
	l = len(m.Environment)
	if l > 0 {
		n += 2 + l + sovGenerated(uint64(l))
	}
	l = len(m.Referrer)
	if l > 0 {
		n += 2 + l + sovGenerated(uint64(l))
	}
	l = len(m.Country)
	if l > 0 {
		n += 2 + l + sovGenerated(uint64(l))
	}
	l = len(m.Language)
	if l > 0 {
		n += 2 + l + sovGenerated(uint64(l))
	}
	l = len(m.Region)
	if l > 0 {
		n += 2 + l + sovGenerated(uint64(l))
	}
	l = len(m.Mcc)
	if l > 0 {
		n += 2 + l + sovGenerated(uint64(l))
	}
	l = len(m.Mnc)
	if l > 0 {
		n += 2 + l + sovGenerated(uint64(l))
	}
	l = len(m.Manufacturer)
	if l > 0 {
		n += 2 + l + sovGenerated(uint64(l))
	}
	l = len(m.ClientSdk)
	if l > 0 {
		n += 2 + l + sovGenerated(uint64(l))
	}
	l = len(m.StoreName)
	if l > 0 {
		n += 2 + l + sovGenerated(uint64(l))
	}
	l = len(m.StoreAppId)
	if l > 0 {
		n += 2 + l + sovGenerated(uint64(l))
	}
	l = len(m.SessionCount)
	if l > 0 {
		n += 2 + l + sovGenerated(uint64(l))
	}
	if m.GlobalSessionCount != 0 {
		n += 2 + sovGenerated(uint64(m.GlobalSessionCount))
	}
	l = len(m.PushToken)
	if l > 0 {
		n += 2 + l + sovGenerated(uint64(l))
	}
	l = len(m.TimeSpent)
	if l > 0 {
		n += 2 + l + sovGenerated(uint64(l))
	}
	l = len(m.LastTimeSpent)
	if l > 0 {
		n += 2 + l + sovGenerated(uint64(l))
	}
	l = len(m.DeviceName)
	if l > 0 {
		n += 2 + l + sovGenerated(uint64(l))
	}
	l = len(m.DeviceType)
	if l > 0 {
		n += 2 + l + sovGenerated(uint64(l))
	}
	l = len(m.TrackingEnabled)
	if l > 0 {
		n += 2 + l + sovGenerated(uint64(l))
	}
	l = m.ZoneOffset.ProtoSize()
	n += 2 + l + sovGenerated(uint64(l))
	l = len(m.ClickLabel)
	if l > 0 {
		n += 2 + l + sovGenerated(uint64(l))
	}
	l = len(m.UserAgent)
	if l > 0 {
		n += 2 + l + sovGenerated(uint64(l))
	}
	l = len(m.ActivityKind)
	if l > 0 {
		n += 2 + l + sovGenerated(uint64(l))
	}
	l = len(m.Deeplink)
	if l > 0 {
		n += 2 + l + sovGenerated(uint64(l))
	}
	l = len(m.SearchTerm)
	if l > 0 {
		n += 2 + l + sovGenerated(uint64(l))
	}
	l = len(m.ClickReferer)
	if l > 0 {
		n += 2 + l + sovGenerated(uint64(l))
	}
	if m.ImpressionBased {
		n += 3
	}
	if m.FraudKind != 0 {
		n += 2 + sovGenerated(uint64(m.FraudKind))
	}
	l = len(m.CpuType)
	if l > 0 {
		n += 2 + l + sovGenerated(uint64(l))
	}
	l = len(m.HardwareName)
	if l > 0 {
		n += 2 + l + sovGenerated(uint64(l))
	}
	l = len(m.NetworkType)
	if l > 0 {
		n += 2 + l + sovGenerated(uint64(l))
	}
	l = m.SecretId.ProtoSize()
	n += 2 + l + sovGenerated(uint64(l))
	if m.IsImported {
		n += 3
	}
	if m.IsServerToServer {
		n += 3
	}
	if m.IsServerToServerBased {
		n += 3
	}
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.ClickTime)
	n += 2 + l + sovGenerated(uint64(l))
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.InstalledAt)
	n += 2 + l + sovGenerated(uint64(l))
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.FirstSessionTime)
	n += 2 + l + sovGenerated(uint64(l))
	l = len(m.FirstCountry)
	if l > 0 {
		n += 2 + l + sovGenerated(uint64(l))
	}
	l = len(m.FirstDeviceType)
	if l > 0 {
		n += 2 + l + sovGenerated(uint64(l))
	}
	l = len(m.FirstOsName)
	if l > 0 {
		n += 2 + l + sovGenerated(uint64(l))
	}
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.ReceivedAt)
	n += 2 + l + sovGenerated(uint64(l))
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.CreatedAtTime)
	n += 2 + l + sovGenerated(uint64(l))
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.LastSessionTime)
	n += 2 + l + sovGenerated(uint64(l))
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.UninstalledAt)
	n += 2 + l + sovGenerated(uint64(l))
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.ReinstalledAt)
	n += 2 + l + sovGenerated(uint64(l))
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.AttributionUpdatedAt)
	n += 2 + l + sovGenerated(uint64(l))
	if m.SessionLength != 0 {
		n += 2 + sovGenerated(uint64(m.SessionLength))
	}
	l = m.PingbackTtl.ProtoSize()
	n += 2 + l + sovGenerated(uint64(l))
	l = m.ClickAttributionWindow.ProtoSize()
	n += 2 + l + sovGenerated(uint64(l))
	l = m.ImpressionAttributionWindow.ProtoSize()
	n += 2 + l + sovGenerated(uint64(l))
	l = m.FingerprintAttributionWindow.ProtoSize()
	n += 2 + l + sovGenerated(uint64(l))
	l = m.ReattributionAttributionWindow.ProtoSize()
	n += 2 + l + sovGenerated(uint64(l))
	l = m.InactiveUserDefinition.ProtoSize()
	n += 2 + l + sovGenerated(uint64(l))
	if len(m.PartnerParameters) > 0 {
		for k, v := range m.PartnerParameters {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovGenerated(uint64(len(k))) + 1 + len(v) + sovGenerated(uint64(len(v)))
			n += mapEntrySize + 2 + sovGenerated(uint64(mapEntrySize))
		}
	}
	if len(m.PartnerSdkParams) > 0 {
		for k, v := range m.PartnerSdkParams {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovGenerated(uint64(len(k))) + 1 + len(v) + sovGenerated(uint64(len(v)))
			n += mapEntrySize + 2 + sovGenerated(uint64(mapEntrySize))
		}
	}
	if len(m.PublisherParams) > 0 {
		for k, v := range m.PublisherParams {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovGenerated(uint64(len(k))) + 1 + len(v) + sovGenerated(uint64(len(v)))
			n += mapEntrySize + 2 + sovGenerated(uint64(mapEntrySize))
		}
	}
	if len(m.DynamicCallbackParameters) > 0 {
		for k, v := range m.DynamicCallbackParameters {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovGenerated(uint64(len(k))) + 1 + len(v) + sovGenerated(uint64(len(v)))
			n += mapEntrySize + 2 + sovGenerated(uint64(mapEntrySize))
		}
	}
	if len(m.ApiPartnerParams) > 0 {
		for k, v := range m.ApiPartnerParams {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovGenerated(uint64(len(k))) + 1 + len(v) + sovGenerated(uint64(len(v)))
			n += mapEntrySize + 2 + sovGenerated(uint64(mapEntrySize))
		}
	}
	if m.AdImpressionsCount != 0 {
		n += 2 + sovGenerated(uint64(m.AdImpressionsCount))
	}
	l = len(m.AdRevenueNetwork)
	if l > 0 {
		n += 2 + l + sovGenerated(uint64(l))
	}
	l = len(m.AdRevenueUnit)
	if l > 0 {
		n += 2 + l + sovGenerated(uint64(l))
	}
	l = len(m.AdRevenuePlacement)
	if l > 0 {
		n += 2 + l + sovGenerated(uint64(l))
	}
	l = len(m.AdMediationPlatform)
	if l > 0 {
		n += 2 + l + sovGenerated(uint64(l))
	}
	return n
}

func (m *SimSlotIds) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Imeis) > 0 {
		for _, s := range m.Imeis {
			l = len(s)
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	if len(m.Meids) > 0 {
		for _, s := range m.Meids {
			l = len(s)
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	l = len(m.DeviceId)
	if l > 0 {
		n += 1 + l + sovGenerated(uint64(l))
	}
	return n
}

func sovGenerated(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozGenerated(x uint64) (n int) {
	return sovGenerated(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Data) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Data: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Data: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TermsSigned", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TermsSigned = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReferenceTag", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReferenceTag = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EngagementType", wireType)
			}
			m.EngagementType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EngagementType |= EngagementType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tracker", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tracker = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InstallTracker", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InstallTracker = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastTracker", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LastTracker = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutdatedTracker", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OutdatedTracker = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppToken", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AppToken = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Adid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Adid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OsName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OsName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OsVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OsVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OsBuild", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OsBuild = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiLevel", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ApiLevel = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nonce", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nonce = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Random", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Random = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AppName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AppVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppVersionShort", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AppVersionShort = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Idfa", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Idfa = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Idfv", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Idfv = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AndroidId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AndroidId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GoogleAdid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GoogleAdid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 23:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FireAdid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FireAdid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 24:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WebUuid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WebUuid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 25:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WinUdid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WinUdid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 26:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WinHwid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WinHwid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 27:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WinNaid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WinNaid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 28:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WinAdid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WinAdid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 29:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SimSlotIds", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.SimSlotIds.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 30:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventToken", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EventToken = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 31:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RevenueData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.RevenueData.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 32:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cost", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Cost.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 33:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CostIdMd5", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CostIdMd5 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 34:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IpAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IpAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 35:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProxyIpAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProxyIpAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 36:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerIp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServerIp = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 37:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MacSha1", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MacSha1 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 38:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MacMd5", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MacMd5 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 39:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Environment", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Environment = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 40:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Referrer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Referrer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 41:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Country", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Country = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 42:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Language", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Language = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 43:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Region", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Region = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 44:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mcc", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Mcc = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 45:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mnc", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Mnc = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 46:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Manufacturer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Manufacturer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 47:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientSdk", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClientSdk = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 48:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StoreName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StoreName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 49:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StoreAppId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StoreAppId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 50:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionCount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SessionCount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 51:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GlobalSessionCount", wireType)
			}
			m.GlobalSessionCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GlobalSessionCount |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 52:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PushToken", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PushToken = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 53:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeSpent", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TimeSpent = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 54:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastTimeSpent", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LastTimeSpent = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 55:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeviceName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeviceName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 56:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeviceType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeviceType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 57:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TrackingEnabled", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TrackingEnabled = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 58:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ZoneOffset", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ZoneOffset.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 59:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClickLabel", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClickLabel = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 60:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserAgent", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserAgent = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 61:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActivityKind", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ActivityKind = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 62:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Deeplink", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Deeplink = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 63:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SearchTerm", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SearchTerm = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 64:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClickReferer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClickReferer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 65:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ImpressionBased", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ImpressionBased = bool(v != 0)
		case 66:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FraudKind", wireType)
			}
			m.FraudKind = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FraudKind |= FraudKind(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 67:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CpuType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CpuType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 68:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HardwareName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HardwareName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 69:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NetworkType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NetworkType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 70:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SecretId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.SecretId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 71:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsImported", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsImported = bool(v != 0)
		case 72:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsServerToServer", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsServerToServer = bool(v != 0)
		case 73:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsServerToServerBased", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsServerToServerBased = bool(v != 0)
		case 74:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClickTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.ClickTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 75:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InstalledAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.InstalledAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 76:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FirstSessionTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.FirstSessionTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 77:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FirstCountry", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FirstCountry = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 78:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FirstDeviceType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FirstDeviceType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 79:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FirstOsName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FirstOsName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 80:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReceivedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.ReceivedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 81:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAtTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.CreatedAtTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 82:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastSessionTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.LastSessionTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 83:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UninstalledAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.UninstalledAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 84:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReinstalledAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.ReinstalledAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 85:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AttributionUpdatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.AttributionUpdatedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 86:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionLength", wireType)
			}
			m.SessionLength = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SessionLength |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 87:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PingbackTtl", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.PingbackTtl.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 88:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClickAttributionWindow", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ClickAttributionWindow.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 89:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ImpressionAttributionWindow", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ImpressionAttributionWindow.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 90:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FingerprintAttributionWindow", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.FingerprintAttributionWindow.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 91:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReattributionAttributionWindow", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ReattributionAttributionWindow.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 92:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InactiveUserDefinition", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.InactiveUserDefinition.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 93:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PartnerParameters", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PartnerParameters == nil {
				m.PartnerParameters = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGenerated
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGenerated
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthGenerated
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthGenerated
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGenerated
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthGenerated
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthGenerated
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipGenerated(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthGenerated
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.PartnerParameters[mapkey] = mapvalue
			iNdEx = postIndex
		case 94:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PartnerSdkParams", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PartnerSdkParams == nil {
				m.PartnerSdkParams = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGenerated
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGenerated
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthGenerated
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthGenerated
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGenerated
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthGenerated
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthGenerated
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipGenerated(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthGenerated
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.PartnerSdkParams[mapkey] = mapvalue
			iNdEx = postIndex
		case 95:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PublisherParams", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PublisherParams == nil {
				m.PublisherParams = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGenerated
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGenerated
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthGenerated
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthGenerated
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGenerated
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthGenerated
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthGenerated
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipGenerated(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthGenerated
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.PublisherParams[mapkey] = mapvalue
			iNdEx = postIndex
		case 96:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DynamicCallbackParameters", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DynamicCallbackParameters == nil {
				m.DynamicCallbackParameters = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGenerated
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGenerated
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthGenerated
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthGenerated
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGenerated
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthGenerated
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthGenerated
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipGenerated(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthGenerated
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.DynamicCallbackParameters[mapkey] = mapvalue
			iNdEx = postIndex
		case 97:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiPartnerParams", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ApiPartnerParams == nil {
				m.ApiPartnerParams = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGenerated
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGenerated
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthGenerated
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthGenerated
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGenerated
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthGenerated
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthGenerated
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipGenerated(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthGenerated
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.ApiPartnerParams[mapkey] = mapvalue
			iNdEx = postIndex
		case 98:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdImpressionsCount", wireType)
			}
			m.AdImpressionsCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AdImpressionsCount |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 99:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdRevenueNetwork", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AdRevenueNetwork = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 100:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdRevenueUnit", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AdRevenueUnit = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 101:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdRevenuePlacement", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AdRevenuePlacement = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 102:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdMediationPlatform", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AdMediationPlatform = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SimSlotIds) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SimSlotIds: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SimSlotIds: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Imeis", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Imeis = append(m.Imeis, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Meids", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Meids = append(m.Meids, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeviceId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeviceId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGenerated(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthGenerated
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthGenerated
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowGenerated
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipGenerated(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthGenerated
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthGenerated = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGenerated   = fmt.Errorf("proto: integer overflow")
)
