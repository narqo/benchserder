// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: internal/callback/generated.proto

package callback

import (
	fmt "fmt"
	math "math"
	math_bits "math/bits"
	time "time"

	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	_ "github.com/golang/protobuf/ptypes/timestamp"
	_ "github.com/narqo/benchserder/internal/tokens"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

func (m *Data) Reset()         { *m = Data{} }
func (m *Data) String() string { return proto.CompactTextString(m) }
func (*Data) ProtoMessage()    {}
func (*Data) Descriptor() ([]byte, []int) {
	return fileDescriptor_da03be43856eb985, []int{0}
}
func (m *Data) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Data.Unmarshal(m, b)
}
func (m *Data) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Data.Marshal(b, m, deterministic)
}
func (m *Data) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Data.Merge(m, src)
}
func (m *Data) XXX_Size() int {
	return xxx_messageInfo_Data.Size(m)
}
func (m *Data) XXX_DiscardUnknown() {
	xxx_messageInfo_Data.DiscardUnknown(m)
}

var xxx_messageInfo_Data proto.InternalMessageInfo

func init() {
	proto.RegisterType((*Data)(nil), "github.com.narqo.benchserder.internal.callback.Data")
	proto.RegisterMapType((Parameters)(nil), "github.com.narqo.benchserder.internal.callback.Data.ApiPartnerParamsEntry")
	proto.RegisterMapType((Parameters)(nil), "github.com.narqo.benchserder.internal.callback.Data.DynamicCallbackParametersEntry")
	proto.RegisterMapType((Parameters)(nil), "github.com.narqo.benchserder.internal.callback.Data.PartnerParametersEntry")
	proto.RegisterMapType((Parameters)(nil), "github.com.narqo.benchserder.internal.callback.Data.PartnerSdkParamsEntry")
	proto.RegisterMapType((Parameters)(nil), "github.com.narqo.benchserder.internal.callback.Data.PublisherParamsEntry")
}

func init() { proto.RegisterFile("internal/callback/generated.proto", fileDescriptor_da03be43856eb985) }

var fileDescriptor_da03be43856eb985 = []byte{
	// 2259 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x58, 0x5f, 0x77, 0x13, 0xb9,
	0x15, 0xc7, 0x4b, 0x20, 0x8e, 0xec, 0xfc, 0x41, 0x04, 0x56, 0x09, 0x4b, 0x1c, 0xa0, 0xdd, 0x66,
	0xe9, 0xe2, 0x2c, 0x50, 0x5a, 0x60, 0xd9, 0x6d, 0x9d, 0x84, 0xee, 0x7a, 0x09, 0x90, 0xda, 0x09,
	0xb4, 0x74, 0x5b, 0x21, 0x8f, 0x64, 0x5b, 0xc7, 0x33, 0x9a, 0xa9, 0xa4, 0x49, 0x48, 0x1f, 0x7b,
	0xfa, 0xb0, 0xa7, 0x4f, 0xfd, 0x08, 0xdb, 0xd3, 0x2f, 0xd3, 0x4f, 0x91, 0xf6, 0xb4, 0xaf, 0x7d,
	0xe8, 0x33, 0x4f, 0x3d, 0xba, 0x9a, 0xb1, 0x9d, 0x3f, 0xec, 0xc6, 0x90, 0x27, 0x8f, 0x7e, 0xf7,
	0xea, 0x77, 0x7f, 0x92, 0xae, 0xae, 0x24, 0xa3, 0x2b, 0x52, 0x59, 0xa1, 0x15, 0x0b, 0x97, 0x03,
	0x16, 0x86, 0x2d, 0x16, 0xf4, 0x96, 0x3b, 0x42, 0x09, 0xcd, 0xac, 0xe0, 0xd5, 0x44, 0xc7, 0x36,
	0xc6, 0xd5, 0x8e, 0xb4, 0xdd, 0xb4, 0x55, 0x0d, 0xe2, 0xa8, 0xaa, 0x98, 0xfe, 0x43, 0x5c, 0x6d,
	0x09, 0x15, 0x74, 0x8d, 0xd0, 0x5c, 0xe8, 0x6a, 0xde, 0xbf, 0x9a, 0xf7, 0x9f, 0xbf, 0x31, 0xf0,
	0x5f, 0xee, 0xc4, 0x9d, 0x78, 0x19, 0x68, 0x5a, 0x69, 0x1b, 0x5a, 0xd0, 0x80, 0x2f, 0x4f, 0x3f,
	0xbf, 0x36, 0xe4, 0x0e, 0xf4, 0xcb, 0x43, 0xf4, 0xcb, 0x7d, 0x79, 0x42, 0x75, 0x58, 0x47, 0x44,
	0x42, 0x59, 0xbb, 0x9b, 0x88, 0x83, 0x22, 0xe7, 0x1f, 0x1c, 0x8f, 0xc5, 0xc6, 0x3d, 0xa1, 0xcc,
	0xdb, 0xf6, 0xe6, 0x62, 0x5b, 0x06, 0x87, 0x63, 0x7f, 0x7a, 0xbc, 0xde, 0x51, 0xac, 0xc4, 0xee,
	0xa1, 0xce, 0x9f, 0x1f, 0xaf, 0xb3, 0x4a, 0xc3, 0x90, 0xb5, 0x42, 0xf1, 0xb6, 0xfd, 0xb5, 0x48,
	0x42, 0x16, 0x08, 0xfd, 0xb6, 0xe2, 0xdb, 0x9a, 0xa5, 0xfc, 0x50, 0xe7, 0x4a, 0x27, 0x8e, 0x3b,
	0xa1, 0x18, 0xac, 0xb0, 0x95, 0x91, 0x30, 0x96, 0x45, 0x89, 0x77, 0xb8, 0xfa, 0xdf, 0x65, 0x34,
	0xb6, 0xc6, 0x2c, 0xc3, 0x57, 0x50, 0xd9, 0x0a, 0x1d, 0x19, 0x6a, 0x64, 0x47, 0x09, 0x4e, 0x0a,
	0x8b, 0x85, 0xa5, 0x62, 0xa3, 0x04, 0x58, 0x13, 0x20, 0x7c, 0x0d, 0x4d, 0x6a, 0xd1, 0x16, 0x5a,
	0xa8, 0x40, 0x50, 0xcb, 0x3a, 0xe4, 0xbd, 0xc5, 0xc2, 0xd2, 0x44, 0xa3, 0xdc, 0x07, 0x37, 0x59,
	0x07, 0x07, 0x68, 0x7a, 0x90, 0x09, 0xd4, 0xa5, 0x02, 0x39, 0xbd, 0x58, 0x58, 0x9a, 0xba, 0x75,
	0xff, 0x98, 0x69, 0xba, 0x3f, 0x8f, 0xaa, 0x9b, 0xbb, 0x89, 0x68, 0x4c, 0x0d, 0x40, 0xd7, 0xc6,
	0xcf, 0xd1, 0xb8, 0xd5, 0x2c, 0xe8, 0x09, 0x4d, 0xc6, 0x9c, 0x86, 0x95, 0xcf, 0x5e, 0xef, 0x55,
	0xee, 0x8d, 0x92, 0x61, 0xd5, 0x4d, 0xdf, 0x7f, 0xd3, 0xb5, 0x1a, 0x39, 0x1b, 0x6e, 0xa3, 0x69,
	0xa9, 0x8c, 0x65, 0x61, 0x48, 0xf3, 0x00, 0x67, 0x4e, 0x22, 0xc0, 0x54, 0xc6, 0x9a, 0x81, 0xf8,
	0x25, 0x2a, 0x87, 0xcc, 0xd8, 0x7e, 0x90, 0xb3, 0x27, 0x11, 0xa4, 0xe4, 0x28, 0xf3, 0x08, 0x5d,
	0x34, 0x13, 0xa7, 0x96, 0xbb, 0x5c, 0xe8, 0x47, 0x19, 0x3f, 0x89, 0x28, 0xd3, 0x39, 0x6d, 0x1e,
	0xe9, 0x19, 0x9a, 0x60, 0x49, 0x42, 0xc1, 0x97, 0x14, 0x21, 0xc4, 0xbd, 0xd7, 0x7b, 0x95, 0x3b,
	0x23, 0x85, 0xa8, 0x25, 0x89, 0xa7, 0x2f, 0xb2, 0xec, 0x0b, 0xd7, 0xd1, 0x18, 0xe3, 0x92, 0x93,
	0x09, 0xa0, 0xbc, 0xf3, 0x7a, 0xaf, 0x72, 0x73, 0x34, 0x4a, 0x2e, 0x79, 0x03, 0x28, 0xf0, 0xfb,
	0x68, 0x3c, 0x36, 0x54, 0xb1, 0x48, 0x10, 0x04, 0x39, 0x7b, 0x36, 0x36, 0x4f, 0x58, 0x24, 0xf0,
	0x65, 0x84, 0x62, 0x43, 0xb7, 0x85, 0x36, 0x32, 0x56, 0xa4, 0x04, 0xb6, 0x89, 0xd8, 0x3c, 0xf3,
	0x00, 0x9e, 0x43, 0xc5, 0xd8, 0xd0, 0x56, 0x2a, 0x43, 0x4e, 0xca, 0x60, 0x1c, 0x8f, 0xcd, 0x8a,
	0x6b, 0xe2, 0x4b, 0x6e, 0xd4, 0x92, 0x86, 0x62, 0x5b, 0x84, 0x64, 0x12, 0x6c, 0x45, 0x96, 0xc8,
	0x75, 0xd7, 0xc6, 0xb3, 0xe8, 0x8c, 0x8a, 0x55, 0x20, 0xc8, 0x14, 0x18, 0x7c, 0x03, 0x5f, 0x44,
	0x67, 0x35, 0x53, 0x3c, 0x8e, 0xc8, 0xb4, 0x17, 0xe1, 0x5b, 0x2e, 0x8a, 0x9b, 0x40, 0x90, 0x37,
	0xe3, 0xa3, 0xb0, 0x24, 0x01, 0x7d, 0x15, 0x54, 0x72, 0xa6, 0x5c, 0xe0, 0x39, 0xb0, 0x22, 0x96,
	0x24, 0xb9, 0xc2, 0xeb, 0xe8, 0xdc, 0x90, 0x03, 0x35, 0xdd, 0x58, 0x5b, 0x82, 0xc1, 0x6d, 0x7a,
	0xe0, 0xd6, 0x74, 0x30, 0xc6, 0x68, 0x4c, 0xf2, 0x36, 0x23, 0xe7, 0xc1, 0x0c, 0xdf, 0x19, 0xb6,
	0x4d, 0x66, 0xfb, 0xd8, 0xb6, 0x9b, 0x14, 0xa6, 0xb8, 0x8e, 0x25, 0xa7, 0x92, 0x93, 0x0b, 0x7e,
	0x52, 0x32, 0xa4, 0xce, 0x9d, 0x26, 0x5f, 0x55, 0x28, 0x2c, 0xcf, 0x45, 0xaf, 0xc9, 0x43, 0x6e,
	0xce, 0xdd, 0xd4, 0xb4, 0xa5, 0xce, 0xcc, 0xef, 0xfb, 0xa9, 0x71, 0x00, 0x18, 0xe7, 0x50, 0x71,
	0x47, 0xb4, 0x68, 0x9a, 0x4a, 0x4e, 0x88, 0x1f, 0xec, 0x8e, 0x68, 0x6d, 0xa5, 0x99, 0x49, 0x2a,
	0x9a, 0xba, 0x6e, 0x73, 0x99, 0x49, 0xaa, 0x2d, 0x3e, 0x30, 0x75, 0x77, 0x24, 0x27, 0xf3, 0x7d,
	0xd3, 0x97, 0x3b, 0x03, 0x93, 0x62, 0x92, 0x93, 0x4b, 0x7d, 0xd3, 0x13, 0x36, 0x30, 0x81, 0x8e,
	0x0f, 0xfa, 0x26, 0x90, 0xf1, 0x12, 0x95, 0x8d, 0x8c, 0xa8, 0x09, 0x63, 0x4b, 0x25, 0x37, 0xe4,
	0xf2, 0x62, 0x61, 0xa9, 0x74, 0xeb, 0xee, 0x31, 0x6b, 0x94, 0x3f, 0x67, 0xaa, 0x4d, 0x19, 0x35,
	0xc3, 0xd8, 0xd6, 0xb9, 0x59, 0x19, 0xfb, 0xc7, 0x5e, 0xe5, 0x54, 0x03, 0x99, 0x3e, 0xe2, 0xa6,
	0x49, 0x6c, 0x43, 0x0d, 0x84, 0x8d, 0xb1, 0xe0, 0xa7, 0x09, 0x20, 0x9f, 0xdf, 0x5f, 0xa3, 0xb2,
	0x76, 0xcd, 0x54, 0x50, 0xce, 0x2c, 0x23, 0x15, 0x90, 0x70, 0xfb, 0x98, 0x12, 0xe0, 0xb0, 0xaa,
	0xd6, 0xa2, 0x38, 0x55, 0x36, 0x8b, 0x5e, 0xca, 0xe8, 0xa0, 0x9e, 0x3f, 0x42, 0x63, 0x41, 0x6c,
	0x2c, 0x59, 0x04, 0xd6, 0x9b, 0x23, 0xb1, 0xae, 0xc6, 0x26, 0xe7, 0x04, 0x12, 0xbc, 0x80, 0x4a,
	0xee, 0x97, 0x4a, 0x4e, 0x23, 0x7e, 0x87, 0x5c, 0xf1, 0x29, 0xe1, 0xa0, 0x3a, 0x7f, 0xcc, 0xef,
	0xb8, 0x8c, 0x91, 0x09, 0x65, 0x9c, 0x6b, 0x61, 0x0c, 0xb9, 0xea, 0xcd, 0x32, 0xa9, 0x79, 0x00,
	0x2f, 0xa1, 0x99, 0x44, 0xc7, 0xaf, 0x76, 0xe9, 0x90, 0xd3, 0x35, 0x70, 0x9a, 0x02, 0xbc, 0xde,
	0xf7, 0xbc, 0x84, 0x26, 0x8c, 0xd0, 0xdb, 0x42, 0x53, 0x99, 0x90, 0x1f, 0xf8, 0xd4, 0xf1, 0x40,
	0x3d, 0x71, 0xcb, 0x19, 0xb1, 0x80, 0x9a, 0x2e, 0xbb, 0x49, 0x7e, 0xe8, 0x97, 0x33, 0x62, 0x41,
	0xb3, 0xcb, 0x6e, 0xba, 0x0d, 0xee, 0x4c, 0x4e, 0xdc, 0x87, 0x7e, 0x6f, 0x45, 0x2c, 0x70, 0xca,
	0x16, 0x51, 0x49, 0xa8, 0x6d, 0xa9, 0x63, 0xe5, 0x0e, 0x0f, 0xf2, 0x23, 0x30, 0x0e, 0x43, 0x78,
	0x1e, 0x15, 0xe1, 0x00, 0xd3, 0x42, 0x93, 0x25, 0x1f, 0x31, 0x6f, 0x63, 0x82, 0xc6, 0x03, 0x37,
	0xc1, 0x7a, 0x97, 0x7c, 0xe4, 0x03, 0x66, 0x4d, 0xd7, 0x2b, 0x64, 0xaa, 0x93, 0xb2, 0x8e, 0x20,
	0xd7, 0x7d, 0xaf, 0xbc, 0x0d, 0xfb, 0x5c, 0x74, 0xdc, 0x7e, 0xfd, 0x71, 0xb6, 0xcf, 0xa1, 0x85,
	0x67, 0xd0, 0xe9, 0x28, 0x08, 0xc8, 0xc7, 0x00, 0xba, 0x4f, 0x40, 0x54, 0x40, 0x6e, 0x64, 0x88,
	0x0a, 0xf0, 0x55, 0x54, 0x8e, 0x98, 0x4a, 0xdb, 0x2c, 0xb0, 0xa9, 0x53, 0x54, 0xf5, 0x47, 0xec,
	0x30, 0xe6, 0x66, 0x3b, 0x08, 0xa5, 0x4b, 0x2d, 0xc3, 0x7b, 0x64, 0x39, 0x5b, 0x0c, 0x40, 0x9a,
	0xbc, 0xe7, 0xcc, 0xc6, 0xc6, 0x5a, 0xf8, 0x82, 0xf2, 0x89, 0x37, 0x03, 0x02, 0x25, 0x65, 0x11,
	0x95, 0xbd, 0xd9, 0xd5, 0x0d, 0xc9, 0xc9, 0x4d, 0x9f, 0x98, 0x80, 0xd5, 0x92, 0xa4, 0x0e, 0xe7,
	0xbc, 0x11, 0x06, 0xea, 0x09, 0x0c, 0x97, 0xdc, 0xf2, 0x22, 0x32, 0x70, 0xd5, 0x61, 0xf8, 0x1e,
	0x9a, 0xed, 0x84, 0x71, 0x8b, 0x85, 0x74, 0xbf, 0xef, 0xed, 0xc5, 0xc2, 0xd2, 0xe9, 0x95, 0xf1,
	0xd7, 0x7b, 0x95, 0xd3, 0x52, 0xd9, 0x06, 0xf6, 0x4e, 0xcd, 0xe1, 0xae, 0x97, 0x11, 0x4a, 0x52,
	0xd3, 0xcd, 0x36, 0xc6, 0x4f, 0xbc, 0x40, 0x87, 0xf8, 0x7d, 0x71, 0x19, 0x21, 0x77, 0x4b, 0xa1,
	0x26, 0x71, 0x2b, 0x76, 0xc7, 0x9b, 0x1d, 0xd2, 0x74, 0x00, 0xfe, 0x10, 0x4d, 0xfb, 0xa3, 0x73,
	0xe0, 0xf3, 0x53, 0xf0, 0x99, 0x84, 0xe3, 0xaf, 0xef, 0x57, 0x41, 0x25, 0xbf, 0x4d, 0xfd, 0x3c,
	0xfc, 0xcc, 0x0f, 0xd3, 0x43, 0x79, 0x6d, 0xcd, 0x1c, 0xe0, 0x96, 0x72, 0x77, 0xd8, 0x01, 0x6e,
	0x19, 0x1f, 0xa1, 0x19, 0x38, 0x39, 0xa5, 0xea, 0x50, 0xa1, 0xdc, 0xe5, 0x8e, 0x93, 0x7b, 0xbe,
	0xb4, 0xe6, 0xf8, 0x43, 0x0f, 0xe3, 0x17, 0xa8, 0xf4, 0xc7, 0x58, 0x09, 0x1a, 0xb7, 0xdb, 0x46,
	0x58, 0x72, 0x7f, 0xa4, 0xad, 0x9c, 0x5f, 0x1d, 0xab, 0xf5, 0xfe, 0x56, 0x46, 0x8e, 0xed, 0x29,
	0x90, 0x39, 0x9d, 0x41, 0x28, 0x83, 0x1e, 0x0d, 0x59, 0x4b, 0x84, 0xe4, 0x53, 0xaf, 0x13, 0xa0,
	0x75, 0x87, 0xb8, 0x09, 0x4b, 0x8d, 0xd0, 0x94, 0x75, 0xdc, 0x64, 0x3c, 0xf0, 0x13, 0xe6, 0x90,
	0x9a, 0x03, 0x30, 0x43, 0x93, 0x2c, 0xb0, 0x72, 0x5b, 0xda, 0x5d, 0xda, 0x93, 0x8a, 0x93, 0xcf,
	0xe0, 0x3e, 0xf6, 0xe0, 0x98, 0xea, 0xf2, 0x8b, 0x69, 0xb5, 0x96, 0x91, 0x3c, 0x92, 0x8a, 0x37,
	0xca, 0x6c, 0xa8, 0xe5, 0x76, 0x03, 0x17, 0x22, 0x09, 0xa5, 0xea, 0x91, 0xcf, 0xfd, 0x6e, 0xc8,
	0xdb, 0x4e, 0xbe, 0x11, 0x4c, 0x07, 0x5d, 0xea, 0xee, 0x92, 0xe4, 0xe7, 0x59, 0xba, 0x01, 0xb4,
	0x29, 0x74, 0xe4, 0xd2, 0xcd, 0x8f, 0xcf, 0xdf, 0x23, 0x35, 0xf9, 0x85, 0x4f, 0x37, 0x00, 0x1b,
	0x1e, 0x73, 0x6b, 0x21, 0xa3, 0x44, 0x67, 0xa9, 0xd6, 0x62, 0x46, 0x70, 0x52, 0x83, 0x2b, 0xea,
	0xf4, 0x00, 0x5f, 0x71, 0x30, 0xde, 0x40, 0x08, 0x2e, 0xc3, 0x7e, 0xb0, 0x2b, 0x30, 0xd8, 0xe3,
	0xd6, 0x3f, 0xe8, 0x58, 0x85, 0x11, 0x4e, 0xc0, 0x37, 0x0c, 0x6f, 0x0e, 0x15, 0x83, 0x24, 0xf5,
	0x69, 0xb2, 0x9a, 0xd5, 0x81, 0x24, 0x85, 0x1c, 0xb9, 0x86, 0x26, 0xbb, 0x4c, 0xf3, 0x1d, 0x96,
	0xef, 0xb7, 0x35, 0x2f, 0x3e, 0x07, 0x21, 0xd3, 0xae, 0xa0, 0xb2, 0x12, 0x76, 0x27, 0xd6, 0x3d,
	0xcf, 0xf1, 0xd0, 0x57, 0xa1, 0x0c, 0x03, 0x9e, 0x67, 0xae, 0xf0, 0x05, 0x5a, 0xb8, 0x1a, 0x4b,
	0x7e, 0xf9, 0xae, 0xe9, 0x53, 0xf4, 0x5c, 0xfe, 0xb0, 0x96, 0x86, 0xca, 0x28, 0x89, 0xb5, 0x15,
	0x9c, 0x7c, 0x01, 0x53, 0x86, 0xa4, 0xa9, 0x67, 0x08, 0xbe, 0x81, 0xce, 0x4b, 0x43, 0xb3, 0xa2,
	0x6b, 0xe3, 0xec, 0x8b, 0x7c, 0x09, 0x8e, 0x33, 0xd2, 0x34, 0xa1, 0xbd, 0x19, 0xfb, 0x5f, 0x7c,
	0x17, 0xcd, 0x1d, 0xe1, 0x9e, 0x2d, 0x48, 0x1d, 0x3a, 0x5d, 0x38, 0xd8, 0xc9, 0x2f, 0xcb, 0x2a,
	0xf2, 0x39, 0x0b, 0x1b, 0x97, 0x7c, 0x05, 0x43, 0x9c, 0xaf, 0xfa, 0x6b, 0x43, 0x35, 0x7f, 0x9f,
	0x54, 0x37, 0xf3, 0xf7, 0xc9, 0x4a, 0xd1, 0x8d, 0xe4, 0xaf, 0xff, 0xac, 0x14, 0xa0, 0xb6, 0x05,
	0x3d, 0x67, 0xc1, 0x5f, 0xa0, 0x72, 0x76, 0x93, 0x16, 0x9c, 0x32, 0x4b, 0x1e, 0x8d, 0x40, 0x53,
	0xea, 0xf7, 0xac, 0x59, 0xdc, 0x40, 0xb8, 0x2d, 0xb5, 0xb1, 0xfd, 0xea, 0x05, 0xaa, 0xd6, 0x47,
	0xa0, 0x9b, 0x81, 0xfe, 0x59, 0x61, 0x03, 0x71, 0xd7, 0xd0, 0xa4, 0xe7, 0xcc, 0xcf, 0x8c, 0xc7,
	0x3e, 0x17, 0x00, 0x5c, 0xcd, 0x0e, 0x8e, 0xeb, 0xe8, 0x9c, 0x77, 0x1a, 0xae, 0x3d, 0x4f, 0x7c,
	0x55, 0x01, 0xc3, 0xda, 0xa0, 0x00, 0x5d, 0xcd, 0x09, 0xf3, 0xcb, 0xeb, 0x53, 0x9f, 0x38, 0x00,
	0x3e, 0xf5, 0x37, 0xd8, 0x87, 0xa8, 0xa4, 0x45, 0x20, 0xe4, 0xb6, 0x9f, 0x90, 0x8d, 0x11, 0x46,
	0x80, 0xf2, 0x8e, 0x35, 0x8b, 0xd7, 0xd1, 0x74, 0xa0, 0x05, 0xbc, 0x16, 0x98, 0xaf, 0xad, 0xe4,
	0x57, 0x23, 0x50, 0x4d, 0x66, 0x9d, 0x6b, 0x50, 0x80, 0xf1, 0x06, 0x3a, 0x07, 0x35, 0x7a, 0xdf,
	0xe4, 0x36, 0x46, 0xe0, 0x83, 0x12, 0x3f, 0x3c, 0xb7, 0x8f, 0xd0, 0x54, 0xaa, 0xf6, 0x2d, 0x7d,
	0x73, 0x14, 0x79, 0x43, 0x7d, 0x6b, 0xd6, 0x91, 0x69, 0xb1, 0x8f, 0x6c, 0x73, 0x14, 0xb2, 0xa1,
	0xbe, 0x35, 0x8b, 0x5f, 0xa0, 0x8b, 0xcc, 0x5a, 0x2d, 0x5b, 0xa9, 0x75, 0x43, 0x4d, 0x13, 0x9e,
	0xcd, 0x22, 0xd9, 0x1a, 0x81, 0x74, 0x76, 0x88, 0x63, 0xcb, 0x53, 0xd4, 0x2c, 0xae, 0xa2, 0xa9,
	0x7c, 0x0a, 0x43, 0xa1, 0x3a, 0xb6, 0x4b, 0x9e, 0xed, 0x3f, 0x5e, 0xf3, 0x83, 0x7a, 0x1d, 0xac,
	0x98, 0xa1, 0x72, 0x22, 0x55, 0xa7, 0xc5, 0xdc, 0x36, 0xb3, 0x21, 0x79, 0x3e, 0xd2, 0xad, 0xb6,
	0x5f, 0x48, 0xd6, 0x52, 0xcd, 0x9c, 0x90, 0xfc, 0x5e, 0x99, 0x73, 0x6e, 0xda, 0x10, 0xbf, 0x42,
	0xc4, 0x6f, 0xe3, 0xe1, 0x41, 0xef, 0x48, 0xc5, 0xe3, 0x1d, 0xf2, 0xeb, 0x13, 0x09, 0x77, 0x11,
	0xf8, 0x6b, 0x03, 0xfa, 0xe7, 0xc0, 0x8e, 0xff, 0x54, 0x40, 0x97, 0x87, 0xce, 0x80, 0x23, 0xe2,
	0xff, 0xe6, 0x44, 0xe2, 0x5f, 0x1a, 0x04, 0x39, 0x2c, 0xe2, 0xcf, 0x05, 0xb4, 0xd0, 0x96, 0xaa,
	0x23, 0x74, 0xa2, 0xa5, 0xb2, 0x47, 0xa9, 0x78, 0x71, 0x22, 0x2a, 0x3e, 0x18, 0x8a, 0x72, 0x58,
	0xc6, 0x37, 0x05, 0xb4, 0xe8, 0x76, 0xdc, 0x20, 0xf8, 0x11, 0x42, 0x7e, 0x7b, 0x22, 0x42, 0x16,
	0xf6, 0xc5, 0x39, 0x2c, 0xe5, 0x15, 0x22, 0x52, 0xc1, 0x6d, 0x40, 0x50, 0xb8, 0x86, 0x70, 0xd1,
	0x96, 0x4a, 0x3a, 0x0f, 0xf2, 0xf5, 0xc9, 0x24, 0x44, 0xce, 0xbf, 0x65, 0x84, 0x5e, 0xeb, 0xb3,
	0xe3, 0xbf, 0x14, 0x10, 0x4e, 0x98, 0xb6, 0x4a, 0x68, 0x9a, 0x30, 0xcd, 0x22, 0x61, 0x85, 0x36,
	0xe4, 0x77, 0x8b, 0xa7, 0x97, 0x4a, 0xb7, 0x1e, 0x8d, 0xf8, 0xaf, 0x68, 0xd5, 0xbd, 0x9a, 0xaa,
	0x1b, 0x9e, 0x6e, 0xa3, 0xcf, 0xf6, 0xd0, 0x15, 0xed, 0x95, 0xa9, 0xd7, 0x7b, 0x15, 0x34, 0x00,
	0x1b, 0xe7, 0x92, 0x83, 0x7e, 0x6e, 0x45, 0xfa, 0x62, 0x0c, 0xef, 0x79, 0x41, 0x86, 0xfc, 0x1e,
	0xc4, 0x7c, 0xf5, 0x2e, 0x62, 0x9a, 0xbc, 0x07, 0x71, 0xde, 0xa0, 0x65, 0x26, 0x39, 0xe0, 0xe6,
	0x72, 0x74, 0x26, 0x49, 0x5b, 0xa1, 0x34, 0xdd, 0x7c, 0x66, 0x0c, 0xa1, 0x20, 0xa4, 0xfe, 0x76,
	0x42, 0x72, 0xb2, 0xef, 0xd2, 0x31, 0x9d, 0xec, 0xf7, 0xc2, 0x7f, 0x2f, 0xa0, 0x4b, 0x7c, 0x57,
	0xb1, 0x48, 0x06, 0x34, 0xe7, 0x1b, 0x5e, 0xa7, 0x97, 0xa0, 0xa8, 0xf9, 0x56, 0x8a, 0xd6, 0x3c,
	0xef, 0x6a, 0x06, 0x7e, 0xdf, 0x7a, 0xcd, 0xf1, 0x37, 0xf9, 0xc3, 0xba, 0xb1, 0x44, 0xd2, 0x7d,
	0x89, 0x64, 0x08, 0x7b, 0x87, 0x75, 0xab, 0x25, 0x72, 0x38, 0x8f, 0xde, 0xb4, 0x6e, 0xec, 0x80,
	0x9b, 0x7b, 0x52, 0x31, 0x4e, 0x07, 0xd5, 0xc7, 0x64, 0x4f, 0xaa, 0xd6, 0x81, 0x27, 0x15, 0xe3,
	0xf5, 0x81, 0x8f, 0x7f, 0x52, 0x7d, 0x8c, 0x30, 0xe3, 0x34, 0xff, 0x3b, 0x21, 0xbb, 0x58, 0x92,
	0x00, 0xae, 0x0b, 0x33, 0x8c, 0x37, 0xbc, 0xe1, 0x89, 0xc7, 0xdd, 0x13, 0x6a, 0xc8, 0x3b, 0x55,
	0xd2, 0x12, 0xee, 0x9f, 0x50, 0x7d, 0xd7, 0x2d, 0x25, 0x2d, 0xfe, 0x04, 0x04, 0xe5, 0x7e, 0xf0,
	0x0c, 0x80, 0x57, 0xb4, 0x00, 0x67, 0xdc, 0x77, 0xde, 0xc8, 0x2d, 0xf8, 0x16, 0xba, 0xc0, 0x38,
	0x8d, 0x04, 0x97, 0xb0, 0x81, 0x5d, 0x1f, 0xdb, 0x8e, 0x75, 0x44, 0xda, 0xd0, 0xe5, 0x3c, 0xe3,
	0x8f, 0x73, 0xdb, 0x46, 0x66, 0x9a, 0x5f, 0x43, 0x17, 0x8f, 0xde, 0x76, 0xee, 0x79, 0xdc, 0x13,
	0xbb, 0xf0, 0x57, 0xf4, 0x44, 0xc3, 0x7d, 0xe2, 0x59, 0x74, 0x66, 0x9b, 0x85, 0xa9, 0xc8, 0xfe,
	0x7a, 0xf6, 0x8d, 0xfb, 0xef, 0xdd, 0x2d, 0xcc, 0xaf, 0xa2, 0x0b, 0x47, 0xee, 0x97, 0x91, 0x48,
	0x56, 0xd0, 0xec, 0x51, 0xb9, 0x3e, 0x12, 0xc7, 0x3a, 0x5a, 0xf8, 0xee, 0xec, 0x1c, 0x75, 0x58,
	0x47, 0xa6, 0xd3, 0x28, 0x24, 0xf7, 0x8b, 0xdf, 0x7c, 0x5b, 0x39, 0xf5, 0xbf, 0xbf, 0x55, 0x4e,
	0xad, 0xe0, 0x7f, 0xfd, 0x7b, 0xe1, 0xd4, 0xb7, 0xff, 0x59, 0x28, 0xbc, 0x28, 0xe6, 0x39, 0xdb,
	0x3a, 0x0b, 0x17, 0x93, 0xdb, 0xff, 0x0f, 0x00, 0x00, 0xff, 0xff, 0x22, 0xeb, 0x93, 0x4f, 0x6a,
	0x1a, 0x00, 0x00,
}

func (m *Data) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TermsSigned {
		n += 2
	}
	l = len(m.ReferenceTag)
	if l > 0 {
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.EngagementType != 0 {
		n += 1 + sovGenerated(uint64(m.EngagementType))
	}
	l = len(m.Tracker)
	if l > 0 {
		n += 1 + l + sovGenerated(uint64(l))
	}
	l = len(m.InstallTracker)
	if l > 0 {
		n += 1 + l + sovGenerated(uint64(l))
	}
	l = len(m.LastTracker)
	if l > 0 {
		n += 1 + l + sovGenerated(uint64(l))
	}
	l = len(m.OutdatedTracker)
	if l > 0 {
		n += 1 + l + sovGenerated(uint64(l))
	}
	l = len(m.AppToken)
	if l > 0 {
		n += 1 + l + sovGenerated(uint64(l))
	}
	l = len(m.Adid)
	if l > 0 {
		n += 1 + l + sovGenerated(uint64(l))
	}
	l = len(m.OsName)
	if l > 0 {
		n += 1 + l + sovGenerated(uint64(l))
	}
	l = len(m.OsVersion)
	if l > 0 {
		n += 1 + l + sovGenerated(uint64(l))
	}
	l = len(m.OsBuild)
	if l > 0 {
		n += 1 + l + sovGenerated(uint64(l))
	}
	l = len(m.ApiLevel)
	if l > 0 {
		n += 1 + l + sovGenerated(uint64(l))
	}
	l = len(m.Nonce)
	if l > 0 {
		n += 1 + l + sovGenerated(uint64(l))
	}
	l = len(m.Random)
	if l > 0 {
		n += 1 + l + sovGenerated(uint64(l))
	}
	l = len(m.AppName)
	if l > 0 {
		n += 2 + l + sovGenerated(uint64(l))
	}
	l = len(m.AppVersion)
	if l > 0 {
		n += 2 + l + sovGenerated(uint64(l))
	}
	l = len(m.AppVersionShort)
	if l > 0 {
		n += 2 + l + sovGenerated(uint64(l))
	}
	l = len(m.Idfa)
	if l > 0 {
		n += 2 + l + sovGenerated(uint64(l))
	}
	l = len(m.Idfv)
	if l > 0 {
		n += 2 + l + sovGenerated(uint64(l))
	}
	l = len(m.AndroidId)
	if l > 0 {
		n += 2 + l + sovGenerated(uint64(l))
	}
	l = len(m.GoogleAdid)
	if l > 0 {
		n += 2 + l + sovGenerated(uint64(l))
	}
	l = len(m.FireAdid)
	if l > 0 {
		n += 2 + l + sovGenerated(uint64(l))
	}
	l = len(m.WebUuid)
	if l > 0 {
		n += 2 + l + sovGenerated(uint64(l))
	}
	l = len(m.WinUdid)
	if l > 0 {
		n += 2 + l + sovGenerated(uint64(l))
	}
	l = len(m.WinHwid)
	if l > 0 {
		n += 2 + l + sovGenerated(uint64(l))
	}
	l = len(m.WinNaid)
	if l > 0 {
		n += 2 + l + sovGenerated(uint64(l))
	}
	l = len(m.WinAdid)
	if l > 0 {
		n += 2 + l + sovGenerated(uint64(l))
	}
	l = m.SimSlotIds.ProtoSize()
	n += 2 + l + sovGenerated(uint64(l))
	l = len(m.EventToken)
	if l > 0 {
		n += 2 + l + sovGenerated(uint64(l))
	}
	l = m.RevenueData.ProtoSize()
	n += 2 + l + sovGenerated(uint64(l))
	l = m.Cost.ProtoSize()
	n += 2 + l + sovGenerated(uint64(l))
	l = len(m.CostIdMd5)
	if l > 0 {
		n += 2 + l + sovGenerated(uint64(l))
	}
	l = len(m.IpAddress)
	if l > 0 {
		n += 2 + l + sovGenerated(uint64(l))
	}
	l = len(m.ProxyIpAddress)
	if l > 0 {
		n += 2 + l + sovGenerated(uint64(l))
	}
	l = len(m.ServerIp)
	if l > 0 {
		n += 2 + l + sovGenerated(uint64(l))
	}
	l = len(m.MacSha1)
	if l > 0 {
		n += 2 + l + sovGenerated(uint64(l))
	}
	l = len(m.MacMd5)
	if l > 0 {
		n += 2 + l + sovGenerated(uint64(l))
	}
	l = len(m.Environment)
	if l > 0 {
		n += 2 + l + sovGenerated(uint64(l))
	}
	l = len(m.Referrer)
	if l > 0 {
		n += 2 + l + sovGenerated(uint64(l))
	}
	l = len(m.Country)
	if l > 0 {
		n += 2 + l + sovGenerated(uint64(l))
	}
	l = len(m.Language)
	if l > 0 {
		n += 2 + l + sovGenerated(uint64(l))
	}
	l = len(m.Region)
	if l > 0 {
		n += 2 + l + sovGenerated(uint64(l))
	}
	l = len(m.Mcc)
	if l > 0 {
		n += 2 + l + sovGenerated(uint64(l))
	}
	l = len(m.Mnc)
	if l > 0 {
		n += 2 + l + sovGenerated(uint64(l))
	}
	l = len(m.Manufacturer)
	if l > 0 {
		n += 2 + l + sovGenerated(uint64(l))
	}
	l = len(m.ClientSdk)
	if l > 0 {
		n += 2 + l + sovGenerated(uint64(l))
	}
	l = len(m.StoreName)
	if l > 0 {
		n += 2 + l + sovGenerated(uint64(l))
	}
	l = len(m.StoreAppId)
	if l > 0 {
		n += 2 + l + sovGenerated(uint64(l))
	}
	l = len(m.SessionCount)
	if l > 0 {
		n += 2 + l + sovGenerated(uint64(l))
	}
	if m.GlobalSessionCount != 0 {
		n += 2 + sovGenerated(uint64(m.GlobalSessionCount))
	}
	l = len(m.PushToken)
	if l > 0 {
		n += 2 + l + sovGenerated(uint64(l))
	}
	l = len(m.TimeSpent)
	if l > 0 {
		n += 2 + l + sovGenerated(uint64(l))
	}
	l = len(m.LastTimeSpent)
	if l > 0 {
		n += 2 + l + sovGenerated(uint64(l))
	}
	l = len(m.DeviceName)
	if l > 0 {
		n += 2 + l + sovGenerated(uint64(l))
	}
	l = len(m.DeviceType)
	if l > 0 {
		n += 2 + l + sovGenerated(uint64(l))
	}
	l = len(m.TrackingEnabled)
	if l > 0 {
		n += 2 + l + sovGenerated(uint64(l))
	}
	l = m.ZoneOffset.ProtoSize()
	n += 2 + l + sovGenerated(uint64(l))
	l = len(m.ClickLabel)
	if l > 0 {
		n += 2 + l + sovGenerated(uint64(l))
	}
	l = len(m.UserAgent)
	if l > 0 {
		n += 2 + l + sovGenerated(uint64(l))
	}
	l = len(m.ActivityKind)
	if l > 0 {
		n += 2 + l + sovGenerated(uint64(l))
	}
	l = len(m.Deeplink)
	if l > 0 {
		n += 2 + l + sovGenerated(uint64(l))
	}
	l = len(m.SearchTerm)
	if l > 0 {
		n += 2 + l + sovGenerated(uint64(l))
	}
	l = len(m.ClickReferer)
	if l > 0 {
		n += 2 + l + sovGenerated(uint64(l))
	}
	if m.ImpressionBased {
		n += 3
	}
	if m.FraudKind != 0 {
		n += 2 + sovGenerated(uint64(m.FraudKind))
	}
	l = len(m.CpuType)
	if l > 0 {
		n += 2 + l + sovGenerated(uint64(l))
	}
	l = len(m.HardwareName)
	if l > 0 {
		n += 2 + l + sovGenerated(uint64(l))
	}
	l = len(m.NetworkType)
	if l > 0 {
		n += 2 + l + sovGenerated(uint64(l))
	}
	l = m.SecretId.ProtoSize()
	n += 2 + l + sovGenerated(uint64(l))
	if m.IsImported {
		n += 3
	}
	if m.IsServerToServer {
		n += 3
	}
	if m.IsServerToServerBased {
		n += 3
	}
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.ClickTime)
	n += 2 + l + sovGenerated(uint64(l))
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.InstalledAt)
	n += 2 + l + sovGenerated(uint64(l))
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.FirstSessionTime)
	n += 2 + l + sovGenerated(uint64(l))
	l = len(m.FirstCountry)
	if l > 0 {
		n += 2 + l + sovGenerated(uint64(l))
	}
	l = len(m.FirstDeviceType)
	if l > 0 {
		n += 2 + l + sovGenerated(uint64(l))
	}
	l = len(m.FirstOsName)
	if l > 0 {
		n += 2 + l + sovGenerated(uint64(l))
	}
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.ReceivedAt)
	n += 2 + l + sovGenerated(uint64(l))
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.CreatedAtTime)
	n += 2 + l + sovGenerated(uint64(l))
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.LastSessionTime)
	n += 2 + l + sovGenerated(uint64(l))
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.UninstalledAt)
	n += 2 + l + sovGenerated(uint64(l))
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.ReinstalledAt)
	n += 2 + l + sovGenerated(uint64(l))
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.AttributionUpdatedAt)
	n += 2 + l + sovGenerated(uint64(l))
	if m.SessionLength != 0 {
		n += 2 + sovGenerated(uint64(m.SessionLength))
	}
	l = m.PingbackTtl.ProtoSize()
	n += 2 + l + sovGenerated(uint64(l))
	l = m.ClickAttributionWindow.ProtoSize()
	n += 2 + l + sovGenerated(uint64(l))
	l = m.ImpressionAttributionWindow.ProtoSize()
	n += 2 + l + sovGenerated(uint64(l))
	l = m.FingerprintAttributionWindow.ProtoSize()
	n += 2 + l + sovGenerated(uint64(l))
	l = m.ReattributionAttributionWindow.ProtoSize()
	n += 2 + l + sovGenerated(uint64(l))
	l = m.InactiveUserDefinition.ProtoSize()
	n += 2 + l + sovGenerated(uint64(l))
	if len(m.PartnerParameters) > 0 {
		for k, v := range m.PartnerParameters {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovGenerated(uint64(len(k))) + 1 + len(v) + sovGenerated(uint64(len(v)))
			n += mapEntrySize + 2 + sovGenerated(uint64(mapEntrySize))
		}
	}
	if len(m.PartnerSdkParams) > 0 {
		for k, v := range m.PartnerSdkParams {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovGenerated(uint64(len(k))) + 1 + len(v) + sovGenerated(uint64(len(v)))
			n += mapEntrySize + 2 + sovGenerated(uint64(mapEntrySize))
		}
	}
	if len(m.PublisherParams) > 0 {
		for k, v := range m.PublisherParams {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovGenerated(uint64(len(k))) + 1 + len(v) + sovGenerated(uint64(len(v)))
			n += mapEntrySize + 2 + sovGenerated(uint64(mapEntrySize))
		}
	}
	if len(m.DynamicCallbackParameters) > 0 {
		for k, v := range m.DynamicCallbackParameters {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovGenerated(uint64(len(k))) + 1 + len(v) + sovGenerated(uint64(len(v)))
			n += mapEntrySize + 2 + sovGenerated(uint64(mapEntrySize))
		}
	}
	if len(m.ApiPartnerParams) > 0 {
		for k, v := range m.ApiPartnerParams {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovGenerated(uint64(len(k))) + 1 + len(v) + sovGenerated(uint64(len(v)))
			n += mapEntrySize + 2 + sovGenerated(uint64(mapEntrySize))
		}
	}
	if m.AdImpressionsCount != 0 {
		n += 2 + sovGenerated(uint64(m.AdImpressionsCount))
	}
	l = len(m.AdRevenueNetwork)
	if l > 0 {
		n += 2 + l + sovGenerated(uint64(l))
	}
	l = len(m.AdRevenueUnit)
	if l > 0 {
		n += 2 + l + sovGenerated(uint64(l))
	}
	l = len(m.AdRevenuePlacement)
	if l > 0 {
		n += 2 + l + sovGenerated(uint64(l))
	}
	l = len(m.AdMediationPlatform)
	if l > 0 {
		n += 2 + l + sovGenerated(uint64(l))
	}
	//if m.XXX_unrecognized != nil {
	//	n += len(m.XXX_unrecognized)
	//}
	return n
}

func sovGenerated(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozGenerated(x uint64) (n int) {
	return sovGenerated(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
