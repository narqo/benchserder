// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package benchserder

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
	callback "github.com/narqo/benchserder/internal/callback"
	money "github.com/narqo/benchserder/internal/money"
	nullable "github.com/narqo/benchserder/internal/nullable"
	time "time"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonF642ad3eDecodeGithubComNarqoBenchserder(in *jlexer.Lexer, out *Event) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "AppToken":
			out.AppToken = string(in.String())
		case "Tracker":
			out.Tracker = string(in.String())
		case "Adid":
			out.Adid = string(in.String())
		case "FacebookAttributionId":
			out.FacebookAttributionId = string(in.String())
		case "FacebookAnonId":
			out.FacebookAnonId = string(in.String())
		case "TrackingEnabled":
			out.TrackingEnabled = string(in.String())
		case "ClickTime":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.ClickTime).UnmarshalJSON(data))
			}
		case "FirstSessionTime":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.FirstSessionTime).UnmarshalJSON(data))
			}
		case "LastSessionTime":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.LastSessionTime).UnmarshalJSON(data))
			}
		case "LastEventTime":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.LastEventTime).UnmarshalJSON(data))
			}
		case "LastRevenueTime":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.LastRevenueTime).UnmarshalJSON(data))
			}
		case "CreatedAt":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.CreatedAt).UnmarshalJSON(data))
			}
		case "ReceivedAt":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.ReceivedAt).UnmarshalJSON(data))
			}
		case "InstallTime":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.InstallTime).UnmarshalJSON(data))
			}
		case "InstallTracker":
			out.InstallTracker = string(in.String())
		case "InstallCountry":
			out.InstallCountry = string(in.String())
		case "InstallImpressionBased":
			easyjsonF642ad3eDecodeGithubComNarqoBenchserderInternalNullable(in, &out.InstallImpressionBased)
		case "EventToken":
			out.EventToken = string(in.String())
		case "RevenueData":
			easyjsonF642ad3eDecodeGithubComNarqoBenchserderInternalMoney(in, &out.RevenueData)
		case "DeviceType":
			out.DeviceType = string(in.String())
		case "Environment":
			out.Environment = string(in.String())
		case "NullSdkLevel":
			easyjsonF642ad3eDecodeGithubComNarqoBenchserderInternalNullable1(in, &out.NullSdkLevel)
		case "ZoneOffset":
			out.ZoneOffset = int(in.Int())
		case "FraudKind":
			out.FraudKind = callback.FraudKind(in.Uint8())
		case "PingbackUrl":
			out.PingbackUrl = string(in.String())
		case "CallbackData":
			if in.IsNull() {
				in.Skip()
				out.CallbackData = nil
			} else {
				if out.CallbackData == nil {
					out.CallbackData = new(callback.Data)
				}
				easyjsonF642ad3eDecodeGithubComNarqoBenchserderInternalCallback(in, out.CallbackData)
			}
		case "FirstOsName":
			out.FirstOsName = string(in.String())
		case "FirstCountry":
			out.FirstCountry = string(in.String())
		case "FirstDeviceType":
			out.FirstDeviceType = string(in.String())
		case "ImpressionBased":
			out.ImpressionBased = bool(in.Bool())
		case "DeviceReattributed":
			out.DeviceReattributed = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonF642ad3eEncodeGithubComNarqoBenchserder(out *jwriter.Writer, in Event) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"AppToken\":"
		out.RawString(prefix[1:])
		out.String(string(in.AppToken))
	}
	{
		const prefix string = ",\"Tracker\":"
		out.RawString(prefix)
		out.String(string(in.Tracker))
	}
	{
		const prefix string = ",\"Adid\":"
		out.RawString(prefix)
		out.String(string(in.Adid))
	}
	{
		const prefix string = ",\"FacebookAttributionId\":"
		out.RawString(prefix)
		out.String(string(in.FacebookAttributionId))
	}
	{
		const prefix string = ",\"FacebookAnonId\":"
		out.RawString(prefix)
		out.String(string(in.FacebookAnonId))
	}
	{
		const prefix string = ",\"TrackingEnabled\":"
		out.RawString(prefix)
		out.String(string(in.TrackingEnabled))
	}
	{
		const prefix string = ",\"ClickTime\":"
		out.RawString(prefix)
		out.Raw((in.ClickTime).MarshalJSON())
	}
	{
		const prefix string = ",\"FirstSessionTime\":"
		out.RawString(prefix)
		out.Raw((in.FirstSessionTime).MarshalJSON())
	}
	{
		const prefix string = ",\"LastSessionTime\":"
		out.RawString(prefix)
		out.Raw((in.LastSessionTime).MarshalJSON())
	}
	{
		const prefix string = ",\"LastEventTime\":"
		out.RawString(prefix)
		out.Raw((in.LastEventTime).MarshalJSON())
	}
	{
		const prefix string = ",\"LastRevenueTime\":"
		out.RawString(prefix)
		out.Raw((in.LastRevenueTime).MarshalJSON())
	}
	{
		const prefix string = ",\"CreatedAt\":"
		out.RawString(prefix)
		out.Raw((in.CreatedAt).MarshalJSON())
	}
	{
		const prefix string = ",\"ReceivedAt\":"
		out.RawString(prefix)
		out.Raw((in.ReceivedAt).MarshalJSON())
	}
	if true {
		const prefix string = ",\"InstallTime\":"
		out.RawString(prefix)
		out.Raw((in.InstallTime).MarshalJSON())
	}
	if in.InstallTracker != "" {
		const prefix string = ",\"InstallTracker\":"
		out.RawString(prefix)
		out.String(string(in.InstallTracker))
	}
	if in.InstallCountry != "" {
		const prefix string = ",\"InstallCountry\":"
		out.RawString(prefix)
		out.String(string(in.InstallCountry))
	}
	if (in.InstallImpressionBased).IsDefined() {
		const prefix string = ",\"InstallImpressionBased\":"
		out.RawString(prefix)
		easyjsonF642ad3eEncodeGithubComNarqoBenchserderInternalNullable(out, in.InstallImpressionBased)
	}
	{
		const prefix string = ",\"EventToken\":"
		out.RawString(prefix)
		out.String(string(in.EventToken))
	}
	{
		const prefix string = ",\"RevenueData\":"
		out.RawString(prefix)
		easyjsonF642ad3eEncodeGithubComNarqoBenchserderInternalMoney(out, in.RevenueData)
	}
	{
		const prefix string = ",\"DeviceType\":"
		out.RawString(prefix)
		out.String(string(in.DeviceType))
	}
	{
		const prefix string = ",\"Environment\":"
		out.RawString(prefix)
		out.String(string(in.Environment))
	}
	{
		const prefix string = ",\"NullSdkLevel\":"
		out.RawString(prefix)
		easyjsonF642ad3eEncodeGithubComNarqoBenchserderInternalNullable1(out, in.NullSdkLevel)
	}
	{
		const prefix string = ",\"ZoneOffset\":"
		out.RawString(prefix)
		out.Int(int(in.ZoneOffset))
	}
	{
		const prefix string = ",\"FraudKind\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.FraudKind))
	}
	{
		const prefix string = ",\"PingbackUrl\":"
		out.RawString(prefix)
		out.String(string(in.PingbackUrl))
	}
	{
		const prefix string = ",\"CallbackData\":"
		out.RawString(prefix)
		if in.CallbackData == nil {
			out.RawString("null")
		} else {
			easyjsonF642ad3eEncodeGithubComNarqoBenchserderInternalCallback(out, *in.CallbackData)
		}
	}
	{
		const prefix string = ",\"FirstOsName\":"
		out.RawString(prefix)
		out.String(string(in.FirstOsName))
	}
	{
		const prefix string = ",\"FirstCountry\":"
		out.RawString(prefix)
		out.String(string(in.FirstCountry))
	}
	{
		const prefix string = ",\"FirstDeviceType\":"
		out.RawString(prefix)
		out.String(string(in.FirstDeviceType))
	}
	{
		const prefix string = ",\"ImpressionBased\":"
		out.RawString(prefix)
		out.Bool(bool(in.ImpressionBased))
	}
	{
		const prefix string = ",\"DeviceReattributed\":"
		out.RawString(prefix)
		out.Bool(bool(in.DeviceReattributed))
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Event) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonF642ad3eEncodeGithubComNarqoBenchserder(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Event) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonF642ad3eDecodeGithubComNarqoBenchserder(l, v)
}
func easyjsonF642ad3eDecodeGithubComNarqoBenchserderInternalCallback(in *jlexer.Lexer, out *callback.Data) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "TermsSigned":
			out.TermsSigned = bool(in.Bool())
		case "ReferenceTag":
			out.ReferenceTag = string(in.String())
		case "EngagementType":
			out.EngagementType = callback.EngagementType(in.Int())
		case "Tracker":
			out.Tracker = string(in.String())
		case "InstallTracker":
			out.InstallTracker = string(in.String())
		case "LastTracker":
			out.LastTracker = string(in.String())
		case "OutdatedTracker":
			out.OutdatedTracker = string(in.String())
		case "AppToken":
			out.AppToken = string(in.String())
		case "Adid":
			out.Adid = string(in.String())
		case "OsName":
			out.OsName = string(in.String())
		case "OsVersion":
			out.OsVersion = string(in.String())
		case "OsBuild":
			out.OsBuild = string(in.String())
		case "ApiLevel":
			out.ApiLevel = string(in.String())
		case "Nonce":
			out.Nonce = string(in.String())
		case "Random":
			out.Random = string(in.String())
		case "AppName":
			out.AppName = string(in.String())
		case "AppVersion":
			out.AppVersion = string(in.String())
		case "AppVersionShort":
			out.AppVersionShort = string(in.String())
		case "Idfa":
			out.Idfa = string(in.String())
		case "Idfv":
			out.Idfv = string(in.String())
		case "AndroidId":
			out.AndroidId = string(in.String())
		case "GoogleAdid":
			out.GoogleAdid = string(in.String())
		case "FireAdid":
			out.FireAdid = string(in.String())
		case "WebUuid":
			out.WebUuid = string(in.String())
		case "WinUdid":
			out.WinUdid = string(in.String())
		case "WinHwid":
			out.WinHwid = string(in.String())
		case "WinNaid":
			out.WinNaid = string(in.String())
		case "WinAdid":
			out.WinAdid = string(in.String())
		case "SimSlotIds":
			easyjsonF642ad3eDecodeGithubComNarqoBenchserderInternalCallback1(in, &out.SimSlotIds)
		case "EventToken":
			out.EventToken = string(in.String())
		case "RevenueData":
			easyjsonF642ad3eDecodeGithubComNarqoBenchserderInternalMoney(in, &out.RevenueData)
		case "Cost":
			easyjsonF642ad3eDecodeGithubComNarqoBenchserderInternalMoney1(in, &out.Cost)
		case "CostIdMd5":
			out.CostIdMd5 = string(in.String())
		case "IpAddress":
			out.IpAddress = string(in.String())
		case "ProxyIpAddress":
			out.ProxyIpAddress = string(in.String())
		case "ServerIp":
			out.ServerIp = string(in.String())
		case "MacSha1":
			out.MacSha1 = string(in.String())
		case "MacMd5":
			out.MacMd5 = string(in.String())
		case "Environment":
			out.Environment = string(in.String())
		case "Referrer":
			out.Referrer = string(in.String())
		case "Country":
			out.Country = string(in.String())
		case "Language":
			out.Language = string(in.String())
		case "Region":
			out.Region = string(in.String())
		case "Mcc":
			out.Mcc = string(in.String())
		case "Mnc":
			out.Mnc = string(in.String())
		case "Manufacturer":
			out.Manufacturer = string(in.String())
		case "ClientSdk":
			out.ClientSdk = string(in.String())
		case "StoreName":
			out.StoreName = string(in.String())
		case "StoreAppId":
			out.StoreAppId = string(in.String())
		case "SessionCount":
			out.SessionCount = string(in.String())
		case "GlobalSessionCount":
			out.GlobalSessionCount = int(in.Int())
		case "PushToken":
			out.PushToken = string(in.String())
		case "TimeSpent":
			out.TimeSpent = string(in.String())
		case "LastTimeSpent":
			out.LastTimeSpent = string(in.String())
		case "DeviceName":
			out.DeviceName = string(in.String())
		case "DeviceType":
			out.DeviceType = string(in.String())
		case "TrackingEnabled":
			out.TrackingEnabled = string(in.String())
		case "ZoneOffset":
			easyjsonF642ad3eDecodeGithubComNarqoBenchserderInternalNullable1(in, &out.ZoneOffset)
		case "ClickLabel":
			out.ClickLabel = string(in.String())
		case "UserAgent":
			out.UserAgent = string(in.String())
		case "ActivityKind":
			out.ActivityKind = string(in.String())
		case "Deeplink":
			out.Deeplink = string(in.String())
		case "SearchTerm":
			out.SearchTerm = string(in.String())
		case "ClickReferer":
			out.ClickReferer = string(in.String())
		case "ImpressionBased":
			out.ImpressionBased = bool(in.Bool())
		case "FraudKind":
			out.FraudKind = callback.FraudKind(in.Uint8())
		case "CpuType":
			out.CpuType = string(in.String())
		case "HardwareName":
			out.HardwareName = string(in.String())
		case "NetworkType":
			out.NetworkType = string(in.String())
		case "SecretId":
			easyjsonF642ad3eDecodeGithubComNarqoBenchserderInternalNullable1(in, &out.SecretId)
		case "IsImported":
			out.IsImported = bool(in.Bool())
		case "IsServerToServer":
			out.IsServerToServer = bool(in.Bool())
		case "IsServerToServerBased":
			out.IsServerToServerBased = bool(in.Bool())
		case "ClickTime":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.ClickTime).UnmarshalJSON(data))
			}
		case "InstalledAt":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.InstalledAt).UnmarshalJSON(data))
			}
		case "FirstSessionTime":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.FirstSessionTime).UnmarshalJSON(data))
			}
		case "FirstCountry":
			out.FirstCountry = string(in.String())
		case "FirstDeviceType":
			out.FirstDeviceType = string(in.String())
		case "FirstOsName":
			out.FirstOsName = string(in.String())
		case "ReceivedAt":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.ReceivedAt).UnmarshalJSON(data))
			}
		case "CreatedAtTime":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.CreatedAtTime).UnmarshalJSON(data))
			}
		case "LastSessionTime":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.LastSessionTime).UnmarshalJSON(data))
			}
		case "UninstalledAt":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.UninstalledAt).UnmarshalJSON(data))
			}
		case "ReinstalledAt":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.ReinstalledAt).UnmarshalJSON(data))
			}
		case "AttributionUpdatedAt":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.AttributionUpdatedAt).UnmarshalJSON(data))
			}
		case "SessionLength":
			out.SessionLength = int(in.Int())
		case "PingbackTtl":
			easyjsonF642ad3eDecodeGithubComNarqoBenchserderInternalNullable2(in, &out.PingbackTtl)
		case "ClickAttributionWindow":
			easyjsonF642ad3eDecodeGithubComNarqoBenchserderInternalNullable2(in, &out.ClickAttributionWindow)
		case "ImpressionAttributionWindow":
			easyjsonF642ad3eDecodeGithubComNarqoBenchserderInternalNullable2(in, &out.ImpressionAttributionWindow)
		case "FingerprintAttributionWindow":
			easyjsonF642ad3eDecodeGithubComNarqoBenchserderInternalNullable2(in, &out.FingerprintAttributionWindow)
		case "ReattributionAttributionWindow":
			easyjsonF642ad3eDecodeGithubComNarqoBenchserderInternalNullable2(in, &out.ReattributionAttributionWindow)
		case "InactiveUserDefinition":
			easyjsonF642ad3eDecodeGithubComNarqoBenchserderInternalNullable2(in, &out.InactiveUserDefinition)
		case "PartnerParameters":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.PartnerParameters = make(map[string]string)
				} else {
					out.PartnerParameters = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v1 string
					v1 = string(in.String())
					(out.PartnerParameters)[key] = v1
					in.WantComma()
				}
				in.Delim('}')
			}
		case "PartnerSdkParams":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.PartnerSdkParams = make(map[string]string)
				} else {
					out.PartnerSdkParams = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v2 string
					v2 = string(in.String())
					(out.PartnerSdkParams)[key] = v2
					in.WantComma()
				}
				in.Delim('}')
			}
		case "PublisherParams":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.PublisherParams = make(map[string]string)
				} else {
					out.PublisherParams = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v3 string
					v3 = string(in.String())
					(out.PublisherParams)[key] = v3
					in.WantComma()
				}
				in.Delim('}')
			}
		case "DynamicCallbackParameters":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.DynamicCallbackParameters = make(map[string]string)
				} else {
					out.DynamicCallbackParameters = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v4 string
					v4 = string(in.String())
					(out.DynamicCallbackParameters)[key] = v4
					in.WantComma()
				}
				in.Delim('}')
			}
		case "ApiPartnerParams":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.ApiPartnerParams = make(map[string]string)
				} else {
					out.ApiPartnerParams = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v5 string
					v5 = string(in.String())
					(out.ApiPartnerParams)[key] = v5
					in.WantComma()
				}
				in.Delim('}')
			}
		case "AdImpressionsCount":
			out.AdImpressionsCount = int(in.Int())
		case "AdRevenueNetwork":
			out.AdRevenueNetwork = string(in.String())
		case "AdRevenueUnit":
			out.AdRevenueUnit = string(in.String())
		case "AdRevenuePlacement":
			out.AdRevenuePlacement = string(in.String())
		case "AdMediationPlatform":
			out.AdMediationPlatform = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonF642ad3eEncodeGithubComNarqoBenchserderInternalCallback(out *jwriter.Writer, in callback.Data) {
	out.RawByte('{')
	first := true
	_ = first
	if in.TermsSigned {
		const prefix string = ",\"TermsSigned\":"
		first = false
		out.RawString(prefix[1:])
		out.Bool(bool(in.TermsSigned))
	}
	if in.ReferenceTag != "" {
		const prefix string = ",\"ReferenceTag\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ReferenceTag))
	}
	if in.EngagementType != 0 {
		const prefix string = ",\"EngagementType\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.EngagementType))
	}
	if in.Tracker != "" {
		const prefix string = ",\"Tracker\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Tracker))
	}
	if in.InstallTracker != "" {
		const prefix string = ",\"InstallTracker\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.InstallTracker))
	}
	if in.LastTracker != "" {
		const prefix string = ",\"LastTracker\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.LastTracker))
	}
	if in.OutdatedTracker != "" {
		const prefix string = ",\"OutdatedTracker\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OutdatedTracker))
	}
	if in.AppToken != "" {
		const prefix string = ",\"AppToken\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.AppToken))
	}
	if in.Adid != "" {
		const prefix string = ",\"Adid\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Adid))
	}
	if in.OsName != "" {
		const prefix string = ",\"OsName\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OsName))
	}
	if in.OsVersion != "" {
		const prefix string = ",\"OsVersion\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OsVersion))
	}
	if in.OsBuild != "" {
		const prefix string = ",\"OsBuild\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OsBuild))
	}
	if in.ApiLevel != "" {
		const prefix string = ",\"ApiLevel\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ApiLevel))
	}
	if in.Nonce != "" {
		const prefix string = ",\"Nonce\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Nonce))
	}
	if in.Random != "" {
		const prefix string = ",\"Random\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Random))
	}
	if in.AppName != "" {
		const prefix string = ",\"AppName\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.AppName))
	}
	if in.AppVersion != "" {
		const prefix string = ",\"AppVersion\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.AppVersion))
	}
	if in.AppVersionShort != "" {
		const prefix string = ",\"AppVersionShort\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.AppVersionShort))
	}
	if in.Idfa != "" {
		const prefix string = ",\"Idfa\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Idfa))
	}
	if in.Idfv != "" {
		const prefix string = ",\"Idfv\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Idfv))
	}
	if in.AndroidId != "" {
		const prefix string = ",\"AndroidId\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.AndroidId))
	}
	if in.GoogleAdid != "" {
		const prefix string = ",\"GoogleAdid\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.GoogleAdid))
	}
	if in.FireAdid != "" {
		const prefix string = ",\"FireAdid\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.FireAdid))
	}
	if in.WebUuid != "" {
		const prefix string = ",\"WebUuid\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.WebUuid))
	}
	if in.WinUdid != "" {
		const prefix string = ",\"WinUdid\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.WinUdid))
	}
	if in.WinHwid != "" {
		const prefix string = ",\"WinHwid\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.WinHwid))
	}
	if in.WinNaid != "" {
		const prefix string = ",\"WinNaid\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.WinNaid))
	}
	if in.WinAdid != "" {
		const prefix string = ",\"WinAdid\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.WinAdid))
	}
	if (in.SimSlotIds).IsDefined() {
		const prefix string = ",\"SimSlotIds\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjsonF642ad3eEncodeGithubComNarqoBenchserderInternalCallback1(out, in.SimSlotIds)
	}
	if in.EventToken != "" {
		const prefix string = ",\"EventToken\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.EventToken))
	}
	if (in.RevenueData).IsDefined() {
		const prefix string = ",\"RevenueData\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjsonF642ad3eEncodeGithubComNarqoBenchserderInternalMoney(out, in.RevenueData)
	}
	if (in.Cost).IsDefined() {
		const prefix string = ",\"Cost\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjsonF642ad3eEncodeGithubComNarqoBenchserderInternalMoney1(out, in.Cost)
	}
	if in.CostIdMd5 != "" {
		const prefix string = ",\"CostIdMd5\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.CostIdMd5))
	}
	if in.IpAddress != "" {
		const prefix string = ",\"IpAddress\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.IpAddress))
	}
	if in.ProxyIpAddress != "" {
		const prefix string = ",\"ProxyIpAddress\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ProxyIpAddress))
	}
	if in.ServerIp != "" {
		const prefix string = ",\"ServerIp\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ServerIp))
	}
	if in.MacSha1 != "" {
		const prefix string = ",\"MacSha1\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.MacSha1))
	}
	if in.MacMd5 != "" {
		const prefix string = ",\"MacMd5\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.MacMd5))
	}
	if in.Environment != "" {
		const prefix string = ",\"Environment\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Environment))
	}
	if in.Referrer != "" {
		const prefix string = ",\"Referrer\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Referrer))
	}
	if in.Country != "" {
		const prefix string = ",\"Country\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Country))
	}
	if in.Language != "" {
		const prefix string = ",\"Language\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Language))
	}
	if in.Region != "" {
		const prefix string = ",\"Region\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Region))
	}
	if in.Mcc != "" {
		const prefix string = ",\"Mcc\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Mcc))
	}
	if in.Mnc != "" {
		const prefix string = ",\"Mnc\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Mnc))
	}
	if in.Manufacturer != "" {
		const prefix string = ",\"Manufacturer\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Manufacturer))
	}
	if in.ClientSdk != "" {
		const prefix string = ",\"ClientSdk\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ClientSdk))
	}
	if in.StoreName != "" {
		const prefix string = ",\"StoreName\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.StoreName))
	}
	if in.StoreAppId != "" {
		const prefix string = ",\"StoreAppId\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.StoreAppId))
	}
	if in.SessionCount != "" {
		const prefix string = ",\"SessionCount\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.SessionCount))
	}
	if in.GlobalSessionCount != 0 {
		const prefix string = ",\"GlobalSessionCount\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.GlobalSessionCount))
	}
	if in.PushToken != "" {
		const prefix string = ",\"PushToken\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.PushToken))
	}
	if in.TimeSpent != "" {
		const prefix string = ",\"TimeSpent\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.TimeSpent))
	}
	if in.LastTimeSpent != "" {
		const prefix string = ",\"LastTimeSpent\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.LastTimeSpent))
	}
	if in.DeviceName != "" {
		const prefix string = ",\"DeviceName\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.DeviceName))
	}
	if in.DeviceType != "" {
		const prefix string = ",\"DeviceType\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.DeviceType))
	}
	if in.TrackingEnabled != "" {
		const prefix string = ",\"TrackingEnabled\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.TrackingEnabled))
	}
	if (in.ZoneOffset).IsDefined() {
		const prefix string = ",\"ZoneOffset\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjsonF642ad3eEncodeGithubComNarqoBenchserderInternalNullable1(out, in.ZoneOffset)
	}
	if in.ClickLabel != "" {
		const prefix string = ",\"ClickLabel\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ClickLabel))
	}
	if in.UserAgent != "" {
		const prefix string = ",\"UserAgent\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.UserAgent))
	}
	if in.ActivityKind != "" {
		const prefix string = ",\"ActivityKind\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ActivityKind))
	}
	if in.Deeplink != "" {
		const prefix string = ",\"Deeplink\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Deeplink))
	}
	if in.SearchTerm != "" {
		const prefix string = ",\"SearchTerm\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.SearchTerm))
	}
	if in.ClickReferer != "" {
		const prefix string = ",\"ClickReferer\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ClickReferer))
	}
	if in.ImpressionBased {
		const prefix string = ",\"ImpressionBased\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.ImpressionBased))
	}
	if in.FraudKind != 0 {
		const prefix string = ",\"FraudKind\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint8(uint8(in.FraudKind))
	}
	if in.CpuType != "" {
		const prefix string = ",\"CpuType\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.CpuType))
	}
	if in.HardwareName != "" {
		const prefix string = ",\"HardwareName\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.HardwareName))
	}
	if in.NetworkType != "" {
		const prefix string = ",\"NetworkType\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.NetworkType))
	}
	if (in.SecretId).IsDefined() {
		const prefix string = ",\"SecretId\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjsonF642ad3eEncodeGithubComNarqoBenchserderInternalNullable1(out, in.SecretId)
	}
	if in.IsImported {
		const prefix string = ",\"IsImported\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.IsImported))
	}
	if in.IsServerToServer {
		const prefix string = ",\"IsServerToServer\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.IsServerToServer))
	}
	if in.IsServerToServerBased {
		const prefix string = ",\"IsServerToServerBased\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.IsServerToServerBased))
	}
	if true {
		const prefix string = ",\"ClickTime\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((in.ClickTime).MarshalJSON())
	}
	if true {
		const prefix string = ",\"InstalledAt\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((in.InstalledAt).MarshalJSON())
	}
	if true {
		const prefix string = ",\"FirstSessionTime\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((in.FirstSessionTime).MarshalJSON())
	}
	if in.FirstCountry != "" {
		const prefix string = ",\"FirstCountry\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.FirstCountry))
	}
	if in.FirstDeviceType != "" {
		const prefix string = ",\"FirstDeviceType\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.FirstDeviceType))
	}
	if in.FirstOsName != "" {
		const prefix string = ",\"FirstOsName\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.FirstOsName))
	}
	if true {
		const prefix string = ",\"ReceivedAt\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((in.ReceivedAt).MarshalJSON())
	}
	if true {
		const prefix string = ",\"CreatedAtTime\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((in.CreatedAtTime).MarshalJSON())
	}
	if true {
		const prefix string = ",\"LastSessionTime\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((in.LastSessionTime).MarshalJSON())
	}
	if true {
		const prefix string = ",\"UninstalledAt\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((in.UninstalledAt).MarshalJSON())
	}
	if true {
		const prefix string = ",\"ReinstalledAt\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((in.ReinstalledAt).MarshalJSON())
	}
	if true {
		const prefix string = ",\"AttributionUpdatedAt\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((in.AttributionUpdatedAt).MarshalJSON())
	}
	if in.SessionLength != 0 {
		const prefix string = ",\"SessionLength\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.SessionLength))
	}
	if (in.PingbackTtl).IsDefined() {
		const prefix string = ",\"PingbackTtl\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjsonF642ad3eEncodeGithubComNarqoBenchserderInternalNullable2(out, in.PingbackTtl)
	}
	if (in.ClickAttributionWindow).IsDefined() {
		const prefix string = ",\"ClickAttributionWindow\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjsonF642ad3eEncodeGithubComNarqoBenchserderInternalNullable2(out, in.ClickAttributionWindow)
	}
	if (in.ImpressionAttributionWindow).IsDefined() {
		const prefix string = ",\"ImpressionAttributionWindow\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjsonF642ad3eEncodeGithubComNarqoBenchserderInternalNullable2(out, in.ImpressionAttributionWindow)
	}
	if (in.FingerprintAttributionWindow).IsDefined() {
		const prefix string = ",\"FingerprintAttributionWindow\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjsonF642ad3eEncodeGithubComNarqoBenchserderInternalNullable2(out, in.FingerprintAttributionWindow)
	}
	if (in.ReattributionAttributionWindow).IsDefined() {
		const prefix string = ",\"ReattributionAttributionWindow\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjsonF642ad3eEncodeGithubComNarqoBenchserderInternalNullable2(out, in.ReattributionAttributionWindow)
	}
	if (in.InactiveUserDefinition).IsDefined() {
		const prefix string = ",\"InactiveUserDefinition\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjsonF642ad3eEncodeGithubComNarqoBenchserderInternalNullable2(out, in.InactiveUserDefinition)
	}
	if len(in.PartnerParameters) != 0 {
		const prefix string = ",\"PartnerParameters\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v6First := true
			for v6Name, v6Value := range in.PartnerParameters {
				if v6First {
					v6First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v6Name))
				out.RawByte(':')
				out.String(string(v6Value))
			}
			out.RawByte('}')
		}
	}
	if len(in.PartnerSdkParams) != 0 {
		const prefix string = ",\"PartnerSdkParams\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v7First := true
			for v7Name, v7Value := range in.PartnerSdkParams {
				if v7First {
					v7First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v7Name))
				out.RawByte(':')
				out.String(string(v7Value))
			}
			out.RawByte('}')
		}
	}
	if len(in.PublisherParams) != 0 {
		const prefix string = ",\"PublisherParams\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v8First := true
			for v8Name, v8Value := range in.PublisherParams {
				if v8First {
					v8First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v8Name))
				out.RawByte(':')
				out.String(string(v8Value))
			}
			out.RawByte('}')
		}
	}
	if len(in.DynamicCallbackParameters) != 0 {
		const prefix string = ",\"DynamicCallbackParameters\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v9First := true
			for v9Name, v9Value := range in.DynamicCallbackParameters {
				if v9First {
					v9First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v9Name))
				out.RawByte(':')
				out.String(string(v9Value))
			}
			out.RawByte('}')
		}
	}
	if len(in.ApiPartnerParams) != 0 {
		const prefix string = ",\"ApiPartnerParams\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v10First := true
			for v10Name, v10Value := range in.ApiPartnerParams {
				if v10First {
					v10First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v10Name))
				out.RawByte(':')
				out.String(string(v10Value))
			}
			out.RawByte('}')
		}
	}
	if in.AdImpressionsCount != 0 {
		const prefix string = ",\"AdImpressionsCount\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.AdImpressionsCount))
	}
	if in.AdRevenueNetwork != "" {
		const prefix string = ",\"AdRevenueNetwork\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.AdRevenueNetwork))
	}
	if in.AdRevenueUnit != "" {
		const prefix string = ",\"AdRevenueUnit\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.AdRevenueUnit))
	}
	if in.AdRevenuePlacement != "" {
		const prefix string = ",\"AdRevenuePlacement\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.AdRevenuePlacement))
	}
	if in.AdMediationPlatform != "" {
		const prefix string = ",\"AdMediationPlatform\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.AdMediationPlatform))
	}
	out.RawByte('}')
}
func easyjsonF642ad3eDecodeGithubComNarqoBenchserderInternalNullable2(in *jlexer.Lexer, out *nullable.Duration) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Duration":
			out.Duration = time.Duration(in.Int64())
		case "Valid":
			out.Valid = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonF642ad3eEncodeGithubComNarqoBenchserderInternalNullable2(out *jwriter.Writer, in nullable.Duration) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Duration\":"
		out.RawString(prefix[1:])
		out.Int64(int64(in.Duration))
	}
	{
		const prefix string = ",\"Valid\":"
		out.RawString(prefix)
		out.Bool(bool(in.Valid))
	}
	out.RawByte('}')
}
func easyjsonF642ad3eDecodeGithubComNarqoBenchserderInternalMoney1(in *jlexer.Lexer, out *money.Cost) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Amount":
			easyjsonF642ad3eDecodeGithubComNarqoBenchserderInternalMoney(in, &out.Amount)
		case "CostType":
			out.CostType = money.CostType(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonF642ad3eEncodeGithubComNarqoBenchserderInternalMoney1(out *jwriter.Writer, in money.Cost) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Amount\":"
		out.RawString(prefix[1:])
		easyjsonF642ad3eEncodeGithubComNarqoBenchserderInternalMoney(out, in.Amount)
	}
	{
		const prefix string = ",\"CostType\":"
		out.RawString(prefix)
		out.Int(int(in.CostType))
	}
	out.RawByte('}')
}
func easyjsonF642ad3eDecodeGithubComNarqoBenchserderInternalCallback1(in *jlexer.Lexer, out *callback.SimSlotIds) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Imeis":
			if in.IsNull() {
				in.Skip()
				out.Imeis = nil
			} else {
				in.Delim('[')
				if out.Imeis == nil {
					if !in.IsDelim(']') {
						out.Imeis = make([]string, 0, 4)
					} else {
						out.Imeis = []string{}
					}
				} else {
					out.Imeis = (out.Imeis)[:0]
				}
				for !in.IsDelim(']') {
					var v11 string
					v11 = string(in.String())
					out.Imeis = append(out.Imeis, v11)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "Meids":
			if in.IsNull() {
				in.Skip()
				out.Meids = nil
			} else {
				in.Delim('[')
				if out.Meids == nil {
					if !in.IsDelim(']') {
						out.Meids = make([]string, 0, 4)
					} else {
						out.Meids = []string{}
					}
				} else {
					out.Meids = (out.Meids)[:0]
				}
				for !in.IsDelim(']') {
					var v12 string
					v12 = string(in.String())
					out.Meids = append(out.Meids, v12)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "DeviceId":
			out.DeviceId = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonF642ad3eEncodeGithubComNarqoBenchserderInternalCallback1(out *jwriter.Writer, in callback.SimSlotIds) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Imeis\":"
		out.RawString(prefix[1:])
		if in.Imeis == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v13, v14 := range in.Imeis {
				if v13 > 0 {
					out.RawByte(',')
				}
				out.String(string(v14))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"Meids\":"
		out.RawString(prefix)
		if in.Meids == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v15, v16 := range in.Meids {
				if v15 > 0 {
					out.RawByte(',')
				}
				out.String(string(v16))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"DeviceId\":"
		out.RawString(prefix)
		out.String(string(in.DeviceId))
	}
	out.RawByte('}')
}
func easyjsonF642ad3eDecodeGithubComNarqoBenchserderInternalNullable1(in *jlexer.Lexer, out *nullable.Int) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Int":
			out.Int = int(in.Int())
		case "Valid":
			out.Valid = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonF642ad3eEncodeGithubComNarqoBenchserderInternalNullable1(out *jwriter.Writer, in nullable.Int) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Int\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Int))
	}
	{
		const prefix string = ",\"Valid\":"
		out.RawString(prefix)
		out.Bool(bool(in.Valid))
	}
	out.RawByte('}')
}
func easyjsonF642ad3eDecodeGithubComNarqoBenchserderInternalMoney(in *jlexer.Lexer, out *money.Amount) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "OriginalAmount":
			out.OriginalAmount = float64(in.Float64())
		case "OriginalCurrency":
			out.OriginalCurrency = string(in.String())
		case "BaseAmount":
			out.BaseAmount = float64(in.Float64())
		case "ReportingAmount":
			out.ReportingAmount = float64(in.Float64())
		case "ReportingCurrency":
			out.ReportingCurrency = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonF642ad3eEncodeGithubComNarqoBenchserderInternalMoney(out *jwriter.Writer, in money.Amount) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"OriginalAmount\":"
		out.RawString(prefix[1:])
		out.Float64(float64(in.OriginalAmount))
	}
	{
		const prefix string = ",\"OriginalCurrency\":"
		out.RawString(prefix)
		out.String(string(in.OriginalCurrency))
	}
	{
		const prefix string = ",\"BaseAmount\":"
		out.RawString(prefix)
		out.Float64(float64(in.BaseAmount))
	}
	{
		const prefix string = ",\"ReportingAmount\":"
		out.RawString(prefix)
		out.Float64(float64(in.ReportingAmount))
	}
	{
		const prefix string = ",\"ReportingCurrency\":"
		out.RawString(prefix)
		out.String(string(in.ReportingCurrency))
	}
	out.RawByte('}')
}
func easyjsonF642ad3eDecodeGithubComNarqoBenchserderInternalNullable(in *jlexer.Lexer, out *nullable.Bool) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Bool":
			out.Bool = bool(in.Bool())
		case "Valid":
			out.Valid = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonF642ad3eEncodeGithubComNarqoBenchserderInternalNullable(out *jwriter.Writer, in nullable.Bool) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Bool\":"
		out.RawString(prefix[1:])
		out.Bool(bool(in.Bool))
	}
	{
		const prefix string = ",\"Valid\":"
		out.RawString(prefix)
		out.Bool(bool(in.Valid))
	}
	out.RawByte('}')
}
